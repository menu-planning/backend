---
description: Validate generated task structure for completeness and quality
globs: 
alwaysApply: false
---
# Rule: Task Quality Validation

## Goal
Analyze generated task folder structure and validate completeness, consistency, and quality. Provide actionable feedback for improvements.

## Token Limit: ~300 lines maximum

## Input
Requires `/tasks/[feature-name]/` folder with guide.md and phase files

## Validation Checklist

### Structure Validation
- [ ] **Folder exists**: `/tasks/[feature-name]/`
- [ ] **Guide file**: `guide.md` present and under 300 lines
- [ ] **Phase files**: Appropriate number for complexity level
- [ ] **File naming**: phase_N.md format consistent

### Content Quality
- [ ] **Task numbering**: Consistent [phase].[section].[task] format
- [ ] **File paths**: All file references are absolute and consistent
- [ ] **Commands**: All use `poetry run python` prefix
- [ ] **Dependencies**: Phase dependencies clearly defined
- [ ] **Validation steps**: Each phase has clear validation criteria

### Completeness Check
- [ ] **Testing coverage**: Unit, integration tests specified where needed
- [ ] **Error handling**: Risk mitigation strategies included
- [ ] **Success criteria**: Measurable outcomes defined
- [ ] **File relationships**: Dependencies between files documented

### Token Compliance
- [ ] **Guide.md**: Under 300 lines
- [ ] **Phase files**: Each under 150 lines
- [ ] **Total project**: Under 1000 lines
- [ ] **No duplication**: Content not repeated across files

## Quality Scoring

Generate quality report:

```markdown
# Task Quality Report: [Feature Name]

## Overall Score: [X]/10

### Structure Quality: [X]/3
- Folder organization: ✓/✗
- File naming: ✓/✗
- Token limits: ✓/✗

### Content Quality: [X]/4
- Task clarity: [X]/2
- Technical accuracy: [X]/2

### Completeness: [X]/3
- Testing strategy: ✓/✗
- Risk mitigation: ✓/✗
- Success criteria: ✓/✗

## Issues Found
1. [Specific issue with location]
2. [Another issue]

## Recommendations
1. [Actionable improvement]
2. [Another recommendation]

## Status
- Ready for execution: Yes/No
- Requires refinement: Yes/No
```

## Common Issues to Check

### Critical Issues (Score: 0)
- Missing essential files
- Broken task numbering
- No validation steps
- Over token limits

### Quality Issues (Score: -1 each)
- Vague task descriptions
- Missing file paths
- Inconsistent commands
- No testing strategy

### Minor Issues (Score: -0.5 each)  
- Formatting inconsistencies
- Minor duplications
- Unclear dependencies

## Auto-Fix Suggestions
For common issues, provide specific fixes:
- Task numbering problems
- Command format issues
- Missing validation steps
- File path inconsistencies

## Integration
If quality score < 7/10, recommend:
- Use refine-task-structure.mdc for improvements
- Specific areas needing attention
- Priority order for fixes
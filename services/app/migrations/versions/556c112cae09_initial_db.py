"""initial db

Revision ID: 556c112cae09
Revises: 
Create Date: 2024-01-08 16:59:01.278801

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "556c112cae09"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    op.execute("CREATE EXTENSION IF NOT EXISTS pg_trgm")
    op.execute("CREATE EXTENSION IF NOT EXISTS fuzzystrmatch")
    op.execute("CREATE SCHEMA IF NOT EXISTS iam")
    op.execute("CREATE SCHEMA IF NOT EXISTS products_catalog")
    op.execute("CREATE SCHEMA IF NOT EXISTS receipt_tracker")
    op.execute("CREATE SCHEMA IF NOT EXISTS recipes_catalog")
    op.execute("CREATE SCHEMA IF NOT EXISTS food_tracker")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "diet_types",
        sa.Column("id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_diet_types")),
        schema="food_tracker",
    )
    op.create_table(
        "members",
        sa.Column("id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_members")),
        schema="food_tracker",
    )
    op.create_table(
        "nutritionists",
        sa.Column("id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_nutritionists")),
        schema="food_tracker",
    )
    op.create_table(
        "owners",
        sa.Column("id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_owners")),
        schema="food_tracker",
    )
    op.create_table(
        "products",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("preprocessed_name", sa.String(), nullable=True),
        sa.Column("brand", sa.String(), nullable=True),
        sa.Column("is_food", sa.Boolean(), nullable=True),
        sa.Column("category", sa.String(), nullable=True),
        sa.Column("parent_category", sa.String(), nullable=True),
        sa.Column("food_group", sa.String(), nullable=True),
        sa.Column("process_type", sa.String(), nullable=True),
        sa.Column("final_score", sa.Float(), nullable=True),
        sa.Column("ingredients_score", sa.Float(), nullable=True),
        sa.Column("nutrients_score", sa.Float(), nullable=True),
        sa.Column("barcode", sa.String(), nullable=True),
        sa.Column("ingredients", sa.TEXT(), nullable=True),
        sa.Column("package_size", sa.Float(), nullable=True),
        sa.Column("package_size_unit", sa.String(), nullable=True),
        sa.Column("image_url", sa.String(), nullable=True),
        sa.Column("calories", sa.Float(), nullable=True),
        sa.Column("protein", sa.Float(), nullable=True),
        sa.Column("carbohydrate", sa.Float(), nullable=True),
        sa.Column("total_fat", sa.Float(), nullable=True),
        sa.Column("saturated_fat", sa.Float(), nullable=True),
        sa.Column("trans_fat", sa.Float(), nullable=True),
        sa.Column("dietary_fiber", sa.Float(), nullable=True),
        sa.Column("sodium", sa.Float(), nullable=True),
        sa.Column("arachidonic_acid", sa.Float(), nullable=True),
        sa.Column("ashes", sa.Float(), nullable=True),
        sa.Column("dha", sa.Float(), nullable=True),
        sa.Column("epa", sa.Float(), nullable=True),
        sa.Column("sugar", sa.Float(), nullable=True),
        sa.Column("starch", sa.Float(), nullable=True),
        sa.Column("biotin", sa.Float(), nullable=True),
        sa.Column("boro", sa.Float(), nullable=True),
        sa.Column("caffeine", sa.Float(), nullable=True),
        sa.Column("calcium", sa.Float(), nullable=True),
        sa.Column("chlorine", sa.Float(), nullable=True),
        sa.Column("copper", sa.Float(), nullable=True),
        sa.Column("cholesterol", sa.Float(), nullable=True),
        sa.Column("choline", sa.Float(), nullable=True),
        sa.Column("chrome", sa.Float(), nullable=True),
        sa.Column("dextrose", sa.Float(), nullable=True),
        sa.Column("sulfur", sa.Float(), nullable=True),
        sa.Column("phenylalanine", sa.Float(), nullable=True),
        sa.Column("iron", sa.Float(), nullable=True),
        sa.Column("insoluble_fiber", sa.Float(), nullable=True),
        sa.Column("soluble_fiber", sa.Float(), nullable=True),
        sa.Column("fluor", sa.Float(), nullable=True),
        sa.Column("phosphorus", sa.Float(), nullable=True),
        sa.Column("fructo_oligosaccharides", sa.Float(), nullable=True),
        sa.Column("fructose", sa.Float(), nullable=True),
        sa.Column("galacto_oligosaccharides", sa.Float(), nullable=True),
        sa.Column("galactose", sa.Float(), nullable=True),
        sa.Column("glucose", sa.Float(), nullable=True),
        sa.Column("glucoronolactone", sa.Float(), nullable=True),
        sa.Column("monounsaturated_fat", sa.Float(), nullable=True),
        sa.Column("polyunsaturated_fat", sa.Float(), nullable=True),
        sa.Column("guarana", sa.Float(), nullable=True),
        sa.Column("inositol", sa.Float(), nullable=True),
        sa.Column("inulin", sa.Float(), nullable=True),
        sa.Column("iodine", sa.Float(), nullable=True),
        sa.Column("l_carnitine", sa.Float(), nullable=True),
        sa.Column("l_methionine", sa.Float(), nullable=True),
        sa.Column("lactose", sa.Float(), nullable=True),
        sa.Column("magnesium", sa.Float(), nullable=True),
        sa.Column("maltose", sa.Float(), nullable=True),
        sa.Column("manganese", sa.Float(), nullable=True),
        sa.Column("molybdenum", sa.Float(), nullable=True),
        sa.Column("linolenic_acid", sa.Float(), nullable=True),
        sa.Column("linoleic_acid", sa.Float(), nullable=True),
        sa.Column("omega_7", sa.Float(), nullable=True),
        sa.Column("omega_9", sa.Float(), nullable=True),
        sa.Column("oleic_acid", sa.Float(), nullable=True),
        sa.Column("other_carbo", sa.Float(), nullable=True),
        sa.Column("polydextrose", sa.Float(), nullable=True),
        sa.Column("polyols", sa.Float(), nullable=True),
        sa.Column("potassium", sa.Float(), nullable=True),
        sa.Column("sacarose", sa.Float(), nullable=True),
        sa.Column("selenium", sa.Float(), nullable=True),
        sa.Column("silicon", sa.Float(), nullable=True),
        sa.Column("sorbitol", sa.Float(), nullable=True),
        sa.Column("sucralose", sa.Float(), nullable=True),
        sa.Column("taurine", sa.Float(), nullable=True),
        sa.Column("vitamin_a", sa.Float(), nullable=True),
        sa.Column("vitamin_b1", sa.Float(), nullable=True),
        sa.Column("vitamin_b2", sa.Float(), nullable=True),
        sa.Column("vitamin_b3", sa.Float(), nullable=True),
        sa.Column("vitamin_b5", sa.Float(), nullable=True),
        sa.Column("vitamin_b6", sa.Float(), nullable=True),
        sa.Column("folic_acid", sa.Float(), nullable=True),
        sa.Column("vitamin_b12", sa.Float(), nullable=True),
        sa.Column("vitamin_c", sa.Float(), nullable=True),
        sa.Column("vitamin_d", sa.Float(), nullable=True),
        sa.Column("vitamin_e", sa.Float(), nullable=True),
        sa.Column("vitamin_k", sa.Float(), nullable=True),
        sa.Column("zinc", sa.Float(), nullable=True),
        sa.Column("retinol", sa.Float(), nullable=True),
        sa.Column("thiamine", sa.Float(), nullable=True),
        sa.Column("riboflavin", sa.Float(), nullable=True),
        sa.Column("pyridoxine", sa.Float(), nullable=True),
        sa.Column("niacin", sa.Float(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_products")),
        schema="food_tracker",
    )
    op.create_index(
        op.f("ix_food_tracker_products_barcode"),
        "products",
        ["barcode"],
        unique=False,
        schema="food_tracker",
    )
    op.create_index(
        op.f("ix_food_tracker_products_brand"),
        "products",
        ["brand"],
        unique=False,
        schema="food_tracker",
    )
    op.create_index(
        op.f("ix_food_tracker_products_category"),
        "products",
        ["category"],
        unique=False,
        schema="food_tracker",
    )
    op.create_index(
        op.f("ix_food_tracker_products_name"),
        "products",
        ["name"],
        unique=False,
        schema="food_tracker",
    )
    op.create_index(
        op.f("ix_food_tracker_products_parent_category"),
        "products",
        ["parent_category"],
        unique=False,
        schema="food_tracker",
    )
    op.create_index(
        op.f("ix_food_tracker_products_preprocessed_name"),
        "products",
        ["preprocessed_name"],
        unique=False,
        schema="food_tracker",
    )
    op.create_index(
        "ix_food_tracker_products_preprocessed_name_gin_trgm",
        "products",
        ["preprocessed_name"],
        unique=False,
        schema="food_tracker",
        postgresql_ops={"preprocessed_name": "gin_trgm_ops"},
        postgresql_using="gin",
    )
    op.create_table(
        "receipts",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("qrcode", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_receipts")),
        schema="food_tracker",
    )
    op.create_table(
        "roles",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("is_default", sa.Boolean(), nullable=False),
        sa.Column("permissions", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("name", name=op.f("pk_roles")),
        schema="iam",
    )
    op.create_table(
        "diet_types",
        sa.Column("id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_diet_types")),
        schema="products_catalog",
    )
    op.create_table(
        "products",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("source", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("preprocessed_name", sa.String(), nullable=True),
        sa.Column("brand", sa.String(), nullable=True),
        sa.Column("is_food", sa.Boolean(), nullable=True),
        sa.Column("is_food_houses_choice", sa.Boolean(), nullable=True),
        sa.Column("category", sa.String(), nullable=True),
        sa.Column("parent_category", sa.String(), nullable=True),
        sa.Column("food_group", sa.String(), nullable=True),
        sa.Column("process_type", sa.String(), nullable=True),
        sa.Column("final_score", sa.Float(), nullable=True),
        sa.Column("ingredients_score", sa.Float(), nullable=True),
        sa.Column("nutrients_score", sa.Float(), nullable=True),
        sa.Column("barcode", sa.String(), nullable=True),
        sa.Column("ingredients", sa.TEXT(), nullable=True),
        sa.Column("package_size", sa.Float(), nullable=True),
        sa.Column("package_size_unit", sa.String(), nullable=True),
        sa.Column("image_url", sa.String(), nullable=True),
        sa.Column("calories", sa.Float(), nullable=True),
        sa.Column("protein", sa.Float(), nullable=True),
        sa.Column("carbohydrate", sa.Float(), nullable=True),
        sa.Column("total_fat", sa.Float(), nullable=True),
        sa.Column("saturated_fat", sa.Float(), nullable=True),
        sa.Column("trans_fat", sa.Float(), nullable=True),
        sa.Column("dietary_fiber", sa.Float(), nullable=True),
        sa.Column("sodium", sa.Float(), nullable=True),
        sa.Column("arachidonic_acid", sa.Float(), nullable=True),
        sa.Column("ashes", sa.Float(), nullable=True),
        sa.Column("dha", sa.Float(), nullable=True),
        sa.Column("epa", sa.Float(), nullable=True),
        sa.Column("sugar", sa.Float(), nullable=True),
        sa.Column("starch", sa.Float(), nullable=True),
        sa.Column("biotin", sa.Float(), nullable=True),
        sa.Column("boro", sa.Float(), nullable=True),
        sa.Column("caffeine", sa.Float(), nullable=True),
        sa.Column("calcium", sa.Float(), nullable=True),
        sa.Column("chlorine", sa.Float(), nullable=True),
        sa.Column("copper", sa.Float(), nullable=True),
        sa.Column("cholesterol", sa.Float(), nullable=True),
        sa.Column("choline", sa.Float(), nullable=True),
        sa.Column("chrome", sa.Float(), nullable=True),
        sa.Column("dextrose", sa.Float(), nullable=True),
        sa.Column("sulfur", sa.Float(), nullable=True),
        sa.Column("phenylalanine", sa.Float(), nullable=True),
        sa.Column("iron", sa.Float(), nullable=True),
        sa.Column("insoluble_fiber", sa.Float(), nullable=True),
        sa.Column("soluble_fiber", sa.Float(), nullable=True),
        sa.Column("fluor", sa.Float(), nullable=True),
        sa.Column("phosphorus", sa.Float(), nullable=True),
        sa.Column("fructo_oligosaccharides", sa.Float(), nullable=True),
        sa.Column("fructose", sa.Float(), nullable=True),
        sa.Column("galacto_oligosaccharides", sa.Float(), nullable=True),
        sa.Column("galactose", sa.Float(), nullable=True),
        sa.Column("glucose", sa.Float(), nullable=True),
        sa.Column("glucoronolactone", sa.Float(), nullable=True),
        sa.Column("monounsaturated_fat", sa.Float(), nullable=True),
        sa.Column("polyunsaturated_fat", sa.Float(), nullable=True),
        sa.Column("guarana", sa.Float(), nullable=True),
        sa.Column("inositol", sa.Float(), nullable=True),
        sa.Column("inulin", sa.Float(), nullable=True),
        sa.Column("iodine", sa.Float(), nullable=True),
        sa.Column("l_carnitine", sa.Float(), nullable=True),
        sa.Column("l_methionine", sa.Float(), nullable=True),
        sa.Column("lactose", sa.Float(), nullable=True),
        sa.Column("magnesium", sa.Float(), nullable=True),
        sa.Column("maltose", sa.Float(), nullable=True),
        sa.Column("manganese", sa.Float(), nullable=True),
        sa.Column("molybdenum", sa.Float(), nullable=True),
        sa.Column("linolenic_acid", sa.Float(), nullable=True),
        sa.Column("linoleic_acid", sa.Float(), nullable=True),
        sa.Column("omega_7", sa.Float(), nullable=True),
        sa.Column("omega_9", sa.Float(), nullable=True),
        sa.Column("oleic_acid", sa.Float(), nullable=True),
        sa.Column("other_carbo", sa.Float(), nullable=True),
        sa.Column("polydextrose", sa.Float(), nullable=True),
        sa.Column("polyols", sa.Float(), nullable=True),
        sa.Column("potassium", sa.Float(), nullable=True),
        sa.Column("sacarose", sa.Float(), nullable=True),
        sa.Column("selenium", sa.Float(), nullable=True),
        sa.Column("silicon", sa.Float(), nullable=True),
        sa.Column("sorbitol", sa.Float(), nullable=True),
        sa.Column("sucralose", sa.Float(), nullable=True),
        sa.Column("taurine", sa.Float(), nullable=True),
        sa.Column("vitamin_a", sa.Float(), nullable=True),
        sa.Column("vitamin_b1", sa.Float(), nullable=True),
        sa.Column("vitamin_b2", sa.Float(), nullable=True),
        sa.Column("vitamin_b3", sa.Float(), nullable=True),
        sa.Column("vitamin_b5", sa.Float(), nullable=True),
        sa.Column("vitamin_b6", sa.Float(), nullable=True),
        sa.Column("folic_acid", sa.Float(), nullable=True),
        sa.Column("vitamin_b12", sa.Float(), nullable=True),
        sa.Column("vitamin_c", sa.Float(), nullable=True),
        sa.Column("vitamin_d", sa.Float(), nullable=True),
        sa.Column("vitamin_e", sa.Float(), nullable=True),
        sa.Column("vitamin_k", sa.Float(), nullable=True),
        sa.Column("zinc", sa.Float(), nullable=True),
        sa.Column("retinol", sa.Float(), nullable=True),
        sa.Column("thiamine", sa.Float(), nullable=True),
        sa.Column("riboflavin", sa.Float(), nullable=True),
        sa.Column("pyridoxine", sa.Float(), nullable=True),
        sa.Column("niacin", sa.Float(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("json_data", sa.TEXT(), nullable=True),
        sa.Column("discarded", sa.Boolean(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_products")),
        schema="products_catalog",
    )
    op.create_index(
        op.f("ix_products_catalog_products_barcode"),
        "products",
        ["barcode"],
        unique=False,
        schema="products_catalog",
    )
    op.create_index(
        op.f("ix_products_catalog_products_brand"),
        "products",
        ["brand"],
        unique=False,
        schema="products_catalog",
    )
    op.create_index(
        op.f("ix_products_catalog_products_category"),
        "products",
        ["category"],
        unique=False,
        schema="products_catalog",
    )
    op.create_index(
        op.f("ix_products_catalog_products_name"),
        "products",
        ["name"],
        unique=False,
        schema="products_catalog",
    )
    op.create_index(
        op.f("ix_products_catalog_products_parent_category"),
        "products",
        ["parent_category"],
        unique=False,
        schema="products_catalog",
    )
    op.create_index(
        op.f("ix_products_catalog_products_preprocessed_name"),
        "products",
        ["preprocessed_name"],
        unique=False,
        schema="products_catalog",
    )
    op.create_index(
        "ix_products_catalog_products_preprocessed_name_gin_trgm",
        "products",
        ["preprocessed_name"],
        unique=False,
        schema="products_catalog",
        postgresql_ops={"preprocessed_name": "gin_trgm_ops"},
        postgresql_using="gin",
    )
    op.create_table(
        "houses",
        sa.Column("id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_houses")),
        schema="receipt_tracker",
    )
    op.create_table(
        "sellers",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("state_registration", sa.String(), nullable=False),
        sa.Column("street", sa.String(), nullable=False),
        sa.Column("number", sa.String(), nullable=False),
        sa.Column("zip_code", sa.String(), nullable=False),
        sa.Column("district", sa.String(), nullable=False),
        sa.Column("city", sa.String(), nullable=False),
        sa.Column("state", sa.String(), nullable=False),
        sa.Column("complement", sa.String(), nullable=True),
        sa.Column("note", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_sellers")),
        schema="receipt_tracker",
    )
    op.create_table(
        "months",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_months")),
        schema="recipes_catalog",
    )
    op.create_table(
        "tags",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("author_id", sa.String(), nullable=False),
        sa.Column("author_role", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("privacy", sa.String(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("discarded", sa.Boolean(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tags")),
        schema="recipes_catalog",
    )
    op.create_table(
        "houses",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("owner_id", sa.String(), nullable=False),
        sa.Column("discarded", sa.Boolean(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["food_tracker.owners.id"],
            name=op.f("fk_houses_owner_id_owners"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_houses")),
        schema="food_tracker",
    )
    op.create_table(
        "products_diet_types_association",
        sa.Column("product_id", sa.String(), nullable=False),
        sa.Column("diet_type_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["diet_type_id"],
            ["food_tracker.diet_types.id"],
            name=op.f("fk_products_diet_types_association_diet_type_id_diet_types"),
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["food_tracker.products.id"],
            name=op.f("fk_products_diet_types_association_product_id_products"),
        ),
        sa.PrimaryKeyConstraint(
            "product_id",
            "diet_type_id",
            name=op.f("pk_products_diet_types_association"),
        ),
        schema="food_tracker",
    )
    op.create_table(
        "users",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column("confirmed", sa.Boolean(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("role_id", sa.String(), nullable=False),
        sa.Column("discarded", sa.Boolean(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["role_id"], ["iam.roles.name"], name=op.f("fk_users_role_id_roles")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
        schema="iam",
    )
    op.create_index(
        op.f("ix_iam_users_email"), "users", ["email"], unique=True, schema="iam"
    )
    op.create_index(
        op.f("ix_iam_users_username"), "users", ["username"], unique=True, schema="iam"
    )
    op.create_table(
        "houses_is_food_registry",
        sa.Column("house_id", sa.String(), nullable=False),
        sa.Column("product_id", sa.String(), nullable=False),
        sa.Column("is_food", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products_catalog.products.id"],
            name=op.f("fk_houses_is_food_registry_product_id_products"),
        ),
        sa.PrimaryKeyConstraint(
            "house_id", "product_id", name=op.f("pk_houses_is_food_registry")
        ),
        schema="products_catalog",
    )
    op.create_table(
        "products_diet_types_association",
        sa.Column("product_id", sa.String(), nullable=False),
        sa.Column("diet_type_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["diet_type_id"],
            ["products_catalog.diet_types.id"],
            name=op.f("fk_products_diet_types_association_diet_type_id_diet_types"),
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products_catalog.products.id"],
            name=op.f("fk_products_diet_types_association_product_id_products"),
        ),
        sa.PrimaryKeyConstraint(
            "product_id",
            "diet_type_id",
            name=op.f("pk_products_diet_types_association"),
        ),
        schema="products_catalog",
    )
    op.create_table(
        "receipts",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("qrcode", sa.String(), nullable=True),
        sa.Column("date", sa.DateTime(), nullable=True),
        sa.Column("state", sa.String(), nullable=True),
        sa.Column("seller_id", sa.String(), nullable=True),
        sa.Column("scraped", sa.Boolean(), nullable=True),
        sa.Column("products_added", sa.Boolean(), nullable=False),
        sa.Column("discarded", sa.Boolean(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["seller_id"],
            ["receipt_tracker.sellers.id"],
            name=op.f("fk_receipts_seller_id_sellers"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_receipts")),
        schema="receipt_tracker",
    )
    op.create_table(
        "recipes",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("preprocessed_name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("author_id", sa.String(), nullable=False),
        sa.Column("author_role", sa.String(), nullable=False),
        sa.Column("total_time", sa.Integer(), nullable=True),
        sa.Column("servings", sa.Integer(), nullable=True),
        sa.Column("notes", sa.String(), nullable=True),
        sa.Column("cuisine_id", sa.String(), nullable=True),
        sa.Column("flavor_profile_id", sa.String(), nullable=True),
        sa.Column("texture_profile_id", sa.String(), nullable=True),
        sa.Column("can_prepare_in_advance", sa.Boolean(), nullable=True),
        sa.Column("is_reheatable", sa.Boolean(), nullable=True),
        sa.Column("privacy", sa.String(), nullable=True),
        sa.Column("calories", sa.Float(), nullable=True),
        sa.Column("protein", sa.Float(), nullable=True),
        sa.Column("carbohydrate", sa.Float(), nullable=True),
        sa.Column("total_fat", sa.Float(), nullable=True),
        sa.Column("saturated_fat", sa.Float(), nullable=True),
        sa.Column("trans_fat", sa.Float(), nullable=True),
        sa.Column("dietary_fiber", sa.Float(), nullable=True),
        sa.Column("sodium", sa.Float(), nullable=True),
        sa.Column("arachidonic_acid", sa.Float(), nullable=True),
        sa.Column("ashes", sa.Float(), nullable=True),
        sa.Column("dha", sa.Float(), nullable=True),
        sa.Column("epa", sa.Float(), nullable=True),
        sa.Column("sugar", sa.Float(), nullable=True),
        sa.Column("starch", sa.Float(), nullable=True),
        sa.Column("biotin", sa.Float(), nullable=True),
        sa.Column("boro", sa.Float(), nullable=True),
        sa.Column("caffeine", sa.Float(), nullable=True),
        sa.Column("calcium", sa.Float(), nullable=True),
        sa.Column("chlorine", sa.Float(), nullable=True),
        sa.Column("copper", sa.Float(), nullable=True),
        sa.Column("cholesterol", sa.Float(), nullable=True),
        sa.Column("choline", sa.Float(), nullable=True),
        sa.Column("chrome", sa.Float(), nullable=True),
        sa.Column("dextrose", sa.Float(), nullable=True),
        sa.Column("sulfur", sa.Float(), nullable=True),
        sa.Column("phenylalanine", sa.Float(), nullable=True),
        sa.Column("iron", sa.Float(), nullable=True),
        sa.Column("insoluble_fiber", sa.Float(), nullable=True),
        sa.Column("soluble_fiber", sa.Float(), nullable=True),
        sa.Column("fluor", sa.Float(), nullable=True),
        sa.Column("phosphorus", sa.Float(), nullable=True),
        sa.Column("fructo_oligosaccharides", sa.Float(), nullable=True),
        sa.Column("fructose", sa.Float(), nullable=True),
        sa.Column("galacto_oligosaccharides", sa.Float(), nullable=True),
        sa.Column("galactose", sa.Float(), nullable=True),
        sa.Column("glucose", sa.Float(), nullable=True),
        sa.Column("glucoronolactone", sa.Float(), nullable=True),
        sa.Column("monounsaturated_fat", sa.Float(), nullable=True),
        sa.Column("polyunsaturated_fat", sa.Float(), nullable=True),
        sa.Column("guarana", sa.Float(), nullable=True),
        sa.Column("inositol", sa.Float(), nullable=True),
        sa.Column("inulin", sa.Float(), nullable=True),
        sa.Column("iodine", sa.Float(), nullable=True),
        sa.Column("l_carnitine", sa.Float(), nullable=True),
        sa.Column("l_methionine", sa.Float(), nullable=True),
        sa.Column("lactose", sa.Float(), nullable=True),
        sa.Column("magnesium", sa.Float(), nullable=True),
        sa.Column("maltose", sa.Float(), nullable=True),
        sa.Column("manganese", sa.Float(), nullable=True),
        sa.Column("molybdenum", sa.Float(), nullable=True),
        sa.Column("linolenic_acid", sa.Float(), nullable=True),
        sa.Column("linoleic_acid", sa.Float(), nullable=True),
        sa.Column("omega_7", sa.Float(), nullable=True),
        sa.Column("omega_9", sa.Float(), nullable=True),
        sa.Column("oleic_acid", sa.Float(), nullable=True),
        sa.Column("other_carbo", sa.Float(), nullable=True),
        sa.Column("polydextrose", sa.Float(), nullable=True),
        sa.Column("polyols", sa.Float(), nullable=True),
        sa.Column("potassium", sa.Float(), nullable=True),
        sa.Column("sacarose", sa.Float(), nullable=True),
        sa.Column("selenium", sa.Float(), nullable=True),
        sa.Column("silicon", sa.Float(), nullable=True),
        sa.Column("sorbitol", sa.Float(), nullable=True),
        sa.Column("sucralose", sa.Float(), nullable=True),
        sa.Column("taurine", sa.Float(), nullable=True),
        sa.Column("vitamin_a", sa.Float(), nullable=True),
        sa.Column("vitamin_b1", sa.Float(), nullable=True),
        sa.Column("vitamin_b2", sa.Float(), nullable=True),
        sa.Column("vitamin_b3", sa.Float(), nullable=True),
        sa.Column("vitamin_b5", sa.Float(), nullable=True),
        sa.Column("vitamin_b6", sa.Float(), nullable=True),
        sa.Column("folic_acid", sa.Float(), nullable=True),
        sa.Column("vitamin_b12", sa.Float(), nullable=True),
        sa.Column("vitamin_c", sa.Float(), nullable=True),
        sa.Column("vitamin_d", sa.Float(), nullable=True),
        sa.Column("vitamin_e", sa.Float(), nullable=True),
        sa.Column("vitamin_k", sa.Float(), nullable=True),
        sa.Column("zinc", sa.Float(), nullable=True),
        sa.Column("retinol", sa.Float(), nullable=True),
        sa.Column("thiamine", sa.Float(), nullable=True),
        sa.Column("riboflavin", sa.Float(), nullable=True),
        sa.Column("pyridoxine", sa.Float(), nullable=True),
        sa.Column("niacin", sa.Float(), nullable=True),
        sa.Column("image_url", sa.String(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("discarded", sa.Boolean(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("average_taste_rating", sa.Float(), nullable=True),
        sa.Column("average_convenience_rating", sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(
            ["cuisine_id"],
            ["recipes_catalog.tags.id"],
            name=op.f("fk_recipes_cuisine_id_tags"),
        ),
        sa.ForeignKeyConstraint(
            ["flavor_profile_id"],
            ["recipes_catalog.tags.id"],
            name=op.f("fk_recipes_flavor_profile_id_tags"),
        ),
        sa.ForeignKeyConstraint(
            ["texture_profile_id"],
            ["recipes_catalog.tags.id"],
            name=op.f("fk_recipes_texture_profile_id_tags"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_recipes")),
        schema="recipes_catalog",
    )
    op.create_index(
        "ix_recipes_catalog_recipes_preprocessed_name_gin_trgm",
        "recipes",
        ["preprocessed_name"],
        unique=False,
        schema="recipes_catalog",
        postgresql_ops={"preprocessed_name": "gin_trgm_ops"},
        postgresql_using="gin",
    )
    op.create_table(
        "houses_members_association",
        sa.Column("house_id", sa.String(), nullable=False),
        sa.Column("member_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["house_id"],
            ["food_tracker.houses.id"],
            name=op.f("fk_houses_members_association_house_id_houses"),
        ),
        sa.ForeignKeyConstraint(
            ["member_id"],
            ["food_tracker.members.id"],
            name=op.f("fk_houses_members_association_member_id_members"),
        ),
        sa.PrimaryKeyConstraint(
            "house_id", "member_id", name=op.f("pk_houses_members_association")
        ),
        schema="food_tracker",
    )
    op.create_table(
        "houses_nutritionists_association",
        sa.Column("house_id", sa.String(), nullable=False),
        sa.Column("nutritionist_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["house_id"],
            ["food_tracker.houses.id"],
            name=op.f("fk_houses_nutritionists_association_house_id_houses"),
        ),
        sa.ForeignKeyConstraint(
            ["nutritionist_id"],
            ["food_tracker.nutritionists.id"],
            name=op.f(
                "fk_houses_nutritionists_association_nutritionist_id_nutritionists"
            ),
        ),
        sa.PrimaryKeyConstraint(
            "house_id",
            "nutritionist_id",
            name=op.f("pk_houses_nutritionists_association"),
        ),
        schema="food_tracker",
    )
    op.create_table(
        "houses_receipts_association",
        sa.Column("house_id", sa.String(), nullable=False),
        sa.Column("receipt_id", sa.String(), nullable=False),
        sa.Column("state", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["house_id"],
            ["food_tracker.houses.id"],
            name=op.f("fk_houses_receipts_association_house_id_houses"),
        ),
        sa.ForeignKeyConstraint(
            ["receipt_id"],
            ["food_tracker.receipts.id"],
            name=op.f("fk_houses_receipts_association_receipt_id_receipts"),
        ),
        sa.PrimaryKeyConstraint(
            "house_id", "receipt_id", name=op.f("pk_houses_receipts_association")
        ),
        schema="food_tracker",
    )
    op.create_table(
        "items",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("house_id", sa.String(), nullable=False),
        sa.Column("date", sa.DateTime(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("top_similar_names", postgresql.ARRAY(sa.String()), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("unit", sa.String(), nullable=False),
        sa.Column("is_food", sa.Boolean(), nullable=True),
        sa.Column("product_id", sa.String(), nullable=True),
        sa.Column("price_per_unit", sa.Float(), nullable=True),
        sa.Column("barcode", sa.String(), nullable=True),
        sa.Column("cfe_key", sa.String(), nullable=True),
        sa.Column("discarded", sa.Boolean(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["house_id"],
            ["food_tracker.houses.id"],
            name=op.f("fk_items_house_id_houses"),
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["food_tracker.products.id"],
            name=op.f("fk_items_product_id_products"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_items")),
        schema="food_tracker",
    )
    op.create_table(
        "items",
        sa.Column("number", sa.Integer(), nullable=False),
        sa.Column("receipt_id", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column("unit", sa.String(), nullable=False),
        sa.Column("price_paid", sa.Float(), nullable=False),
        sa.Column("price_per_unit", sa.Float(), nullable=False),
        sa.Column("gross_price", sa.Float(), nullable=False),
        sa.Column("sellers_product_code", sa.String(), nullable=False),
        sa.Column("barcode", sa.String(), nullable=False),
        sa.Column("discount", sa.Float(), nullable=True),
        sa.Column("product_id", sa.String(), nullable=True),
        sa.Column("product_name", sa.String(), nullable=True),
        sa.Column("product_source", sa.String(), nullable=True),
        sa.Column("product_is_food", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["receipt_id"],
            ["receipt_tracker.receipts.id"],
            name=op.f("fk_items_receipt_id_receipts"),
        ),
        sa.PrimaryKeyConstraint("number", "receipt_id", name=op.f("pk_items")),
        schema="receipt_tracker",
    )
    op.create_table(
        "receipts_houses_association",
        sa.Column("receipt_id", sa.String(), nullable=False),
        sa.Column("house_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["house_id"],
            ["receipt_tracker.houses.id"],
            name=op.f("fk_receipts_houses_association_house_id_houses"),
        ),
        sa.ForeignKeyConstraint(
            ["receipt_id"],
            ["receipt_tracker.receipts.id"],
            name=op.f("fk_receipts_houses_association_receipt_id_receipts"),
        ),
        sa.PrimaryKeyConstraint(
            "receipt_id", "house_id", name=op.f("pk_receipts_houses_association")
        ),
        schema="receipt_tracker",
    )
    op.create_table(
        "ingredients",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("preprocessed_name", sa.String(), nullable=False),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column("unit", sa.String(), nullable=False),
        sa.Column("recipe_id", sa.String(), nullable=False),
        sa.Column("full_text", sa.String(), nullable=True),
        sa.Column("product_id", sa.String(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["recipe_id"],
            ["recipes_catalog.recipes.id"],
            name=op.f("fk_ingredients_recipe_id_recipes"),
        ),
        sa.PrimaryKeyConstraint("name", "recipe_id", name=op.f("pk_ingredients")),
        schema="recipes_catalog",
    )
    op.create_index(
        "ix_recipes_catalog_ingredients_preprocessed_name_gin_trgm",
        "ingredients",
        ["preprocessed_name"],
        unique=False,
        schema="recipes_catalog",
        postgresql_ops={"preprocessed_name": "gin_trgm_ops"},
        postgresql_using="gin",
    )
    op.create_table(
        "instructions",
        sa.Column("number", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("instruction", sa.String(), nullable=False),
        sa.Column("recipe_id", sa.String(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["recipe_id"],
            ["recipes_catalog.recipes.id"],
            name=op.f("fk_instructions_recipe_id_recipes"),
        ),
        sa.PrimaryKeyConstraint("number", "recipe_id", name=op.f("pk_instructions")),
        schema="recipes_catalog",
    )
    op.create_table(
        "ratings",
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("recipe_id", sa.String(), nullable=False),
        sa.Column("taste", sa.Integer(), nullable=False),
        sa.Column("convenience", sa.Integer(), nullable=False),
        sa.Column("comment", sa.String(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["recipe_id"],
            ["recipes_catalog.recipes.id"],
            name=op.f("fk_ratings_recipe_id_recipes"),
        ),
        sa.PrimaryKeyConstraint("user_id", "recipe_id", name=op.f("pk_ratings")),
        schema="recipes_catalog",
    )
    op.create_table(
        "recipes_season_association",
        sa.Column("recipe_id", sa.String(), nullable=False),
        sa.Column("season_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["recipe_id"],
            ["recipes_catalog.recipes.id"],
            name=op.f("fk_recipes_season_association_recipe_id_recipes"),
        ),
        sa.ForeignKeyConstraint(
            ["season_id"],
            ["recipes_catalog.months.id"],
            name=op.f("fk_recipes_season_association_season_id_months"),
        ),
        sa.PrimaryKeyConstraint(
            "recipe_id", "season_id", name=op.f("pk_recipes_season_association")
        ),
        schema="recipes_catalog",
    )
    op.create_table(
        "recipes_tags_association",
        sa.Column("recipe_id", sa.String(), nullable=False),
        sa.Column("tag_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["recipe_id"],
            ["recipes_catalog.recipes.id"],
            name=op.f("fk_recipes_tags_association_recipe_id_recipes"),
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["recipes_catalog.tags.id"],
            name=op.f("fk_recipes_tags_association_tag_id_tags"),
        ),
        sa.PrimaryKeyConstraint(
            "recipe_id", "tag_id", name=op.f("pk_recipes_tags_association")
        ),
        schema="recipes_catalog",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("recipes_tags_association", schema="recipes_catalog")
    op.drop_table("recipes_season_association", schema="recipes_catalog")
    op.drop_table("ratings", schema="recipes_catalog")
    op.drop_table("instructions", schema="recipes_catalog")
    op.drop_index(
        "ix_recipes_catalog_ingredients_preprocessed_name_gin_trgm",
        table_name="ingredients",
        schema="recipes_catalog",
        postgresql_ops={"preprocessed_name": "gin_trgm_ops"},
        postgresql_using="gin",
    )
    op.drop_table("ingredients", schema="recipes_catalog")
    op.drop_table("receipts_houses_association", schema="receipt_tracker")
    op.drop_table("items", schema="receipt_tracker")
    op.drop_table("items", schema="food_tracker")
    op.drop_table("houses_receipts_association", schema="food_tracker")
    op.drop_table("houses_nutritionists_association", schema="food_tracker")
    op.drop_table("houses_members_association", schema="food_tracker")
    op.drop_index(
        "ix_recipes_catalog_recipes_preprocessed_name_gin_trgm",
        table_name="recipes",
        schema="recipes_catalog",
        postgresql_ops={"preprocessed_name": "gin_trgm_ops"},
        postgresql_using="gin",
    )
    op.drop_table("recipes", schema="recipes_catalog")
    op.drop_table("receipts", schema="receipt_tracker")
    op.drop_table("products_diet_types_association", schema="products_catalog")
    op.drop_table("houses_is_food_registry", schema="products_catalog")
    op.drop_index(op.f("ix_iam_users_username"), table_name="users", schema="iam")
    op.drop_index(op.f("ix_iam_users_email"), table_name="users", schema="iam")
    op.drop_table("users", schema="iam")
    op.drop_table("products_diet_types_association", schema="food_tracker")
    op.drop_table("houses", schema="food_tracker")
    op.drop_table("tags", schema="recipes_catalog")
    op.drop_table("months", schema="recipes_catalog")
    op.drop_table("sellers", schema="receipt_tracker")
    op.drop_table("houses", schema="receipt_tracker")
    op.drop_index(
        "ix_products_catalog_products_preprocessed_name_gin_trgm",
        table_name="products",
        schema="products_catalog",
        postgresql_ops={"preprocessed_name": "gin_trgm_ops"},
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("ix_products_catalog_products_preprocessed_name"),
        table_name="products",
        schema="products_catalog",
    )
    op.drop_index(
        op.f("ix_products_catalog_products_parent_category"),
        table_name="products",
        schema="products_catalog",
    )
    op.drop_index(
        op.f("ix_products_catalog_products_name"),
        table_name="products",
        schema="products_catalog",
    )
    op.drop_index(
        op.f("ix_products_catalog_products_category"),
        table_name="products",
        schema="products_catalog",
    )
    op.drop_index(
        op.f("ix_products_catalog_products_brand"),
        table_name="products",
        schema="products_catalog",
    )
    op.drop_index(
        op.f("ix_products_catalog_products_barcode"),
        table_name="products",
        schema="products_catalog",
    )
    op.drop_table("products", schema="products_catalog")
    op.drop_table("diet_types", schema="products_catalog")
    op.drop_table("roles", schema="iam")
    op.drop_table("receipts", schema="food_tracker")
    op.drop_index(
        "ix_food_tracker_products_preprocessed_name_gin_trgm",
        table_name="products",
        schema="food_tracker",
        postgresql_ops={"preprocessed_name": "gin_trgm_ops"},
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("ix_food_tracker_products_preprocessed_name"),
        table_name="products",
        schema="food_tracker",
    )
    op.drop_index(
        op.f("ix_food_tracker_products_parent_category"),
        table_name="products",
        schema="food_tracker",
    )
    op.drop_index(
        op.f("ix_food_tracker_products_name"),
        table_name="products",
        schema="food_tracker",
    )
    op.drop_index(
        op.f("ix_food_tracker_products_category"),
        table_name="products",
        schema="food_tracker",
    )
    op.drop_index(
        op.f("ix_food_tracker_products_brand"),
        table_name="products",
        schema="food_tracker",
    )
    op.drop_index(
        op.f("ix_food_tracker_products_barcode"),
        table_name="products",
        schema="food_tracker",
    )
    op.drop_table("products", schema="food_tracker")
    op.drop_table("owners", schema="food_tracker")
    op.drop_table("nutritionists", schema="food_tracker")
    op.drop_table("members", schema="food_tracker")
    op.drop_table("diet_types", schema="food_tracker")
    # ### end Alembic commands ###
    op.execute("DROP SCHEMA IF EXISTS food_tracker")
    op.execute("DROP SCHEMA IF EXISTS recipes_catalog")
    op.execute("DROP SCHEMA IF EXISTS receipt_tracker")
    op.execute("DROP SCHEMA IF EXISTS products_catalog")
    op.execute("DROP SCHEMA IF EXISTS iam")
    op.execute("DROP EXTENSION IF EXISTS fuzzystrmatch")
    op.execute("DROP EXTENSION IF EXISTS pg_trgm")

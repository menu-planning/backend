---
description: Execute tasks from phase files with real-time tracking and cross-phase awareness.
globs: 
alwaysApply: false
---
# Rule: Phase Task Execution

## Goal
Execute tasks from phase files generated by the new task workflow. Simple, direct execution with real-time updates and cross-phase awareness.

## Token Limit: ~120 lines maximum

## Input
Phase file from `/tasks/[feature-name]/phase_N.md` created by gent-2-create-task-folders.mdc

## Core Process

### Step 1: Phase Assessment
1. **Read current phase file** (phase_N.md)
2. **Check guide.md** for architecture context
3. **Verify prerequisites** from phase metadata
4. **Present execution plan**:

```markdown
Executing Phase [N]: [Phase Name]

**Tasks in this phase**: [count]
**Estimated time**: [from metadata]
**Key files to modify**: [list from tasks]

Ready to proceed? Type 'proceed' to start execution.
```

### Step 2: Sequential Task Execution
For each uncompleted task:

1. **Execute the task** as specified
2. **Run validation** (tests, linting, etc.) as defined in task
3. **Update task status** to `[x]` in phase file immediately
4. **Document any discoveries**:
   - New files created
   - Unexpected dependencies found
   - Changes that affect future phases
5. **Report completion** with direct file references

### Step 3: Cross-Phase Updates
When task affects future phases:

1. **Identify affected phases** (check guide.md dependencies)
2. **Update relevant phase files** with new information:
   - Add **NEW** tasks if needed
   - Update file paths if they changed
   - Note new dependencies discovered
3. **Reference specific files**: Always provide exact paths

Example update:
```markdown
Task 1.2.1 completed: Created `src/api/user_service.py`

**Cross-phase impact**:
- Updated phase_2.md: Added integration task for user_service.py
- Updated phase_3.md: Added test coverage for new service
- File reference: `/tasks/user-management/phase_2.md:15`
```

### Step 4: Phase Completion
When all phase tasks complete:

1. **Run phase validation** (from phase file)
2. **Update guide.md** if architecture changed
3. **Prepare next phase** for execution
4. **Report phase completion**:

```markdown
Phase [N] Complete ✓

**Tasks completed**: [count]
**Files modified**: [list with paths]
**Tests passing**: ✓
**Next phase ready**: phase_[N+1].md

**Key discoveries for next phases**:
- [Discovery 1] → affects phase_[X].md
- [Discovery 2] → affects phase_[Y].md

Ready for Phase [N+1]? Type 'proceed' or 'stop'.
```

## Command Execution Standards
- **Always use poetry**: `poetry run python pytest`, `poetry run python ruff check .`
- **Provide file paths**: Exact paths to modified files
- **Real-time updates**: Mark tasks complete immediately after validation
- **Direct references**: Reference specific lines in phase files when adding tasks

## Cross-Phase Awareness
Monitor for changes that affect future phases:
- **New dependencies** discovered during implementation
- **File structure changes** that affect other phases
- **API changes** that require updates in integration phases
- **Test requirements** that weren't initially apparent

## Update Pattern
When updating phase files:
```markdown
**NEW** [N].X.Y [Description]
  - Files: `exact/path/to/file.py`
  - Reason: [Why this was discovered]
  - Added by: Phase [current] execution
```

## Error Handling
If task fails or validation doesn't pass:
1. **Stop execution** at that task
2. **Report specific error** with file references
3. **Ask for guidance** before proceeding
4. **Don't mark task complete** until validation passes

## No Complexity Modes
- No assessment of execution modes
- No emergency protocols
- No elaborate decision trees
- Simple: read task → execute → validate → mark complete → continue

## Integration
Works seamlessly with:
- Task folders from gent-2-create-task-folders.mdc
- Guide.md for architecture context
- Phase dependencies from task generation workflow

## Output Standards
Always provide:
- **Exact file paths** for all changes
- **Direct references** to phase files updated
- **Clear next steps** for continuation
- **Specific validation results** (test output, linting, etc.)
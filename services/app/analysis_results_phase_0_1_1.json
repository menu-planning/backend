{
  "summary": {
    "total_files_scanned": 90,
    "total_schemas_found": 84,
    "type_adapters_found": 9,
    "conversion_patterns": 117,
    "inconsistencies_found": 46,
    "file_errors": 0
  },
  "schemas": [
    {
      "name": "ApiAssignRoleToUser",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/iam/core/adapters/api_schemas/commands/api_assign_role_to_user.py",
      "base_classes": [
        "BaseCommand[AssignRoleToUser, SaBase]"
      ],
      "field_count": 2,
      "method_names": [
        "validate_user_id",
        "to_domain",
        "from_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": [
        "field_validator(user_id) -> validate_user_id"
      ]
    },
    {
      "name": "ApiCreateUser",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/iam/core/adapters/api_schemas/commands/api_create_user.py",
      "base_classes": [
        "BaseCommand[CreateUser, SaBase]"
      ],
      "field_count": 1,
      "method_names": [
        "validate_user_id",
        "to_domain",
        "from_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": [
        "field_validator(user_id) -> validate_user_id"
      ]
    },
    {
      "name": "ApiRemoveRoleFromUser",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/iam/core/adapters/api_schemas/commands/api_remove_role_from_user.py",
      "base_classes": [
        "BaseCommand[RemoveRoleFromUser, SaBase]"
      ],
      "field_count": 2,
      "method_names": [
        "validate_user_id",
        "to_domain",
        "from_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": [
        "field_validator(user_id) -> validate_user_id"
      ]
    },
    {
      "name": "ApiUser",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/iam/core/adapters/api_schemas/root_aggregate/user.py",
      "base_classes": [
        "BaseEntity[User, UserSaModel]"
      ],
      "field_count": 1,
      "method_names": [
        "from_domain",
        "to_domain",
        "from_orm_model",
        "to_orm_kwargs"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiRole",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/iam/core/adapters/api_schemas/value_objects/api_role.py",
      "base_classes": [
        "BaseValueObject[Role, RoleSaModel]"
      ],
      "field_count": 3,
      "method_names": [
        "from_domain",
        "to_domain",
        "from_orm_model",
        "to_orm_kwargs"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiCreateClassification",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/api_create_classification.py",
      "base_classes": [
        "BaseModel"
      ],
      "field_count": 4,
      "method_names": [
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiUpdateClassification",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/api_update_classification.py",
      "base_classes": [
        "BaseModel"
      ],
      "field_count": 3,
      "method_names": [
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiCreateBrand",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/brand/api_create_brand.py",
      "base_classes": [
        "ApiCreateClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiUpdateBrand",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/brand/api_update_brand.py",
      "base_classes": [
        "ApiUpdateClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiCreateCategory",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/category/api_create_category.py",
      "base_classes": [
        "ApiCreateClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiUpdateCategory",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/category/api_update_category.py",
      "base_classes": [
        "ApiUpdateClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiCreateFoodGroup",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/food_group/api_create_food_group.py",
      "base_classes": [
        "ApiCreateClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiUpdateFoodGroup",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/food_group/api_update_food_group.py",
      "base_classes": [
        "ApiUpdateClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiCreateParentCategory",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/parent_category/api_create_parent_category.py",
      "base_classes": [
        "ApiCreateClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiUpdateParentCategory",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/parent_category/api_update_parent_category.py",
      "base_classes": [
        "ApiUpdateClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiCreateProcessType",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/process_type/api_create_process_type.py",
      "base_classes": [
        "ApiCreateClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiUpdateProcessType",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/process_type/api_update_process_type.py",
      "base_classes": [
        "ApiUpdateClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiCreateSource",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/source/api_create_source.py",
      "base_classes": [
        "ApiCreateClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiUpdateSource",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/source/api_update_source.py",
      "base_classes": [
        "ApiUpdateClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiAddFoodProduct",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/products/api_add_food_product.py",
      "base_classes": [
        "BaseModel"
      ],
      "field_count": 15,
      "method_names": [
        "serialize_package_size_unit",
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiAddHouseInputAndCreateProductIfNeeded",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/products/api_add_house_input_and_create_product_if_needed.py",
      "base_classes": [
        "BaseModel"
      ],
      "field_count": 3,
      "method_names": [
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiAddProductImage",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/products/api_add_product_image.py",
      "base_classes": [
        "BaseModel"
      ],
      "field_count": 2,
      "method_names": [
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiBrand",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/entities/classifications/api_brand.py",
      "base_classes": [
        "ApiClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiCategory",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/entities/classifications/api_category.py",
      "base_classes": [
        "ApiClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiClassification",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/entities/classifications/api_classification.py",
      "base_classes": [
        "BaseModel"
      ],
      "field_count": 9,
      "method_names": [
        "from_domain",
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiClassificationFilter",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/entities/classifications/api_classification_filter.py",
      "base_classes": [
        "BaseModel"
      ],
      "field_count": 7,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiFoodGroup",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/entities/classifications/api_food_group.py",
      "base_classes": [
        "ApiClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiParentCategory",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/entities/classifications/api_parent_category.py",
      "base_classes": [
        "ApiClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiProcessType",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/entities/classifications/api_process_type.py",
      "base_classes": [
        "ApiClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiSource",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/entities/classifications/api_source.py",
      "base_classes": [
        "ApiClassification"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiProduct",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/root_aggregate/api_product.py",
      "base_classes": [
        "BaseModel"
      ],
      "field_count": 33,
      "method_names": [
        "model_dump",
        "check_edible_yield_range",
        "serialize_package_size_unit",
        "from_domain",
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": [
        "field_validator(edible_yield) -> check_edible_yield_range"
      ]
    },
    {
      "name": "ApiProductFilter",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/root_aggregate/api_product_filter.py",
      "base_classes": [
        "BaseModel"
      ],
      "field_count": 15,
      "method_names": [
        "filter_must_be_allowed_by_repo"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiIsFoodVotes",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/value_objects/api_if_food_votes.py",
      "base_classes": [
        "BaseModel"
      ],
      "field_count": 3,
      "method_names": [
        "from_domain",
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiScore",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/value_objects/api_score.py",
      "base_classes": [
        "BaseModel"
      ],
      "field_count": 3,
      "method_names": [
        "from_domain",
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiUser",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/value_objects/api_user.py",
      "base_classes": [
        "ApiSeedUser"
      ],
      "field_count": 2,
      "method_names": [
        "to_domain",
        "from_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiRole",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/internal_providers/iam/api_schemas/role.py",
      "base_classes": [
        "ApiSeedRole"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiCreateClient",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/commands/create_client.py",
      "base_classes": [
        "BaseCommand[CreateClient, SaBase]"
      ],
      "field_count": 6,
      "method_names": [
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiCreateMenu",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/commands/create_menu.py",
      "base_classes": [
        "BaseCommand[CreateMenu, SaBase]"
      ],
      "field_count": 3,
      "method_names": [
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiDeleteClient",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/commands/delete_client.py",
      "base_classes": [
        "BaseCommand[DeleteClient, SaBase]"
      ],
      "field_count": 1,
      "method_names": [
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiDeleteMenu",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/commands/delete_menu.py",
      "base_classes": [
        "BaseCommand[DeleteMenu, SaBase]"
      ],
      "field_count": 1,
      "method_names": [
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiAttributesToUpdateOnClient",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/commands/update_client.py",
      "base_classes": [
        "BaseCommand[UpdateClient, SaBase]"
      ],
      "field_count": 5,
      "method_names": [
        "serialize_profile",
        "serialize_contact_info",
        "serialize_address",
        "serialize_tags",
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiUpdateClient",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/commands/update_client.py",
      "base_classes": [
        "BaseCommand[UpdateClient, SaBase]"
      ],
      "field_count": 2,
      "method_names": [
        "to_domain",
        "from_api_client"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiAttributesToUpdateOnMenu",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/commands/update_menu.py",
      "base_classes": [
        "BaseCommand[UpdateMenu, SaBase]"
      ],
      "field_count": 4,
      "method_names": [
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiUpdateMenu",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/commands/update_menu.py",
      "base_classes": [
        "BaseCommand[UpdateMenu, SaBase]"
      ],
      "field_count": 2,
      "method_names": [
        "to_domain",
        "from_api_menu"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiMenu",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/entities/api_menu.py",
      "base_classes": [
        "BaseEntity[Menu, MenuSaModel]"
      ],
      "field_count": 6,
      "method_names": [
        "validate_meals",
        "validate_tags",
        "from_domain",
        "to_domain",
        "from_orm_model",
        "to_orm_kwargs"
      ],
      "type_adapters": 1,
      "validation_patterns": [
        "field_validator(meals) -> validate_meals",
        "field_validator(tags) -> validate_tags"
      ]
    },
    {
      "name": "ApiMenuFilter",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/entities/api_menu_filter.py",
      "base_classes": [
        "BaseModel"
      ],
      "field_count": 11,
      "method_names": [
        "model_dump",
        "filter_must_be_allowed_by_repo"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiClient",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/root_aggregate/api_client.py",
      "base_classes": [
        "BaseEntity[Client, ClientSaModel]"
      ],
      "field_count": 8,
      "method_names": [
        "validate_tags",
        "from_domain",
        "to_domain",
        "from_orm_model",
        "to_orm_kwargs"
      ],
      "type_adapters": 0,
      "validation_patterns": [
        "field_validator(tags) -> validate_tags"
      ]
    },
    {
      "name": "ApiClientFilter",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/root_aggregate/api_client_filter.py",
      "base_classes": [
        "BaseModel"
      ],
      "field_count": 7,
      "method_names": [
        "filter_must_be_allowed_by_repo"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiMenuMeal",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/value_objects/api_menu_meal.py",
      "base_classes": [
        "BaseValueObject[MenuMeal, MenuMealSaModel]"
      ],
      "field_count": 7,
      "method_names": [
        "from_domain",
        "to_domain",
        "from_orm_model",
        "to_orm_kwargs"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiRole",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/internal_providers/iam/api_schemas/role.py",
      "base_classes": [
        "ApiSeedRole"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiCopyMeal",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/copy_meal.py",
      "base_classes": [
        "BaseModel"
      ],
      "field_count": 3,
      "method_names": [
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiCopyRecipe",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/copy_recipe.py",
      "base_classes": [
        "BaseCommand[CopyRecipe, SaBase]"
      ],
      "field_count": 3,
      "method_names": [
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiCreateMeal",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/create_meal.py",
      "base_classes": [
        "BaseCommand[CreateMeal, SaBase]"
      ],
      "field_count": 8,
      "method_names": [
        "validate_recipes",
        "validate_tags",
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": [
        "field_validator(recipes) -> validate_recipes",
        "field_validator(tags) -> validate_tags"
      ]
    },
    {
      "name": "ApiCreateRecipe",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/create_recipe.py",
      "base_classes": [
        "BaseCommand[CreateRecipe, SaBase]"
      ],
      "field_count": 14,
      "method_names": [
        "validate_ingredients",
        "validate_tags",
        "to_domain",
        "from_recipe"
      ],
      "type_adapters": 0,
      "validation_patterns": [
        "field_validator(ingredients) -> validate_ingredients",
        "field_validator(tags) -> validate_tags"
      ]
    },
    {
      "name": "ApiDeleteMeal",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/delete_meal.py",
      "base_classes": [
        "BaseCommand[DeleteMeal, SaBase]"
      ],
      "field_count": 1,
      "method_names": [
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiDeleteRecipe",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/delete_recipe.py",
      "base_classes": [
        "BaseCommand[DeleteRecipe, SaBase]"
      ],
      "field_count": 1,
      "method_names": [
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiRateRecipe",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/rate_recipe.py",
      "base_classes": [
        "BaseCommand[RateRecipe, SaBase]"
      ],
      "field_count": 1,
      "method_names": [
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiAttributesToUpdateOnMeal",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/update_meal.py",
      "base_classes": [
        "BaseCommand[UpdateMeal, SaBase]"
      ],
      "field_count": 8,
      "method_names": [
        "validate_recipes",
        "validate_tags",
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": [
        "field_validator(recipes) -> validate_recipes",
        "field_validator(tags) -> validate_tags"
      ]
    },
    {
      "name": "ApiUpdateMeal",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/update_meal.py",
      "base_classes": [
        "BaseCommand[UpdateMeal, SaBase]"
      ],
      "field_count": 2,
      "method_names": [
        "to_domain",
        "from_api_meal"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiAttributesToUpdateOnRecipe",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/update_recipe.py",
      "base_classes": [
        "BaseCommand[UpdateRecipe, SaBase]"
      ],
      "field_count": 12,
      "method_names": [
        "validate_ingredients",
        "validate_tags",
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": [
        "field_validator(ingredients) -> validate_ingredients",
        "field_validator(tags) -> validate_tags"
      ]
    },
    {
      "name": "ApiUpdateRecipe",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/update_recipe.py",
      "base_classes": [
        "BaseCommand[UpdateRecipe, SaBase]"
      ],
      "field_count": 2,
      "method_names": [
        "to_domain",
        "from_api_recipe"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiRecipe",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/entities/api_recipe.py",
      "base_classes": [
        "BaseEntity[_Recipe, RecipeSaModel]"
      ],
      "field_count": 18,
      "method_names": [
        "validate_ingredients",
        "validate_tags",
        "validate_ratings",
        "from_domain",
        "to_domain",
        "from_orm_model",
        "to_orm_kwargs"
      ],
      "type_adapters": 1,
      "validation_patterns": [
        "field_validator(ingredients) -> validate_ingredients",
        "field_validator(tags) -> validate_tags",
        "field_validator(ratings) -> validate_ratings"
      ]
    },
    {
      "name": "ApiRecipeFilter",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/entities/api_recipe_filter.py",
      "base_classes": [
        "BaseApiModel[Any, Any]"
      ],
      "field_count": 43,
      "method_names": [
        "model_dump",
        "filter_must_be_allowed_by_repo"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiMeal",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/root_aggregate/api_meal.py",
      "base_classes": [
        "BaseEntity[Meal, MealSaModel]"
      ],
      "field_count": 16,
      "method_names": [
        "validate_recipes",
        "validate_tags",
        "from_domain",
        "to_domain",
        "from_orm_model",
        "to_orm_kwargs"
      ],
      "type_adapters": 0,
      "validation_patterns": [
        "field_validator(recipes) -> validate_recipes",
        "field_validator(tags) -> validate_tags"
      ]
    },
    {
      "name": "ApiMealFilter",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/root_aggregate/api_meal_filter.py",
      "base_classes": [
        "BaseModel"
      ],
      "field_count": 42,
      "method_names": [
        "model_dump",
        "filter_must_be_allowed_by_repo"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiIngredient",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/value_objetcs/api_ingredient.py",
      "base_classes": [
        "BaseValueObject[Ingredient, IngredientSaModel]"
      ],
      "field_count": 6,
      "method_names": [
        "from_domain",
        "to_domain",
        "from_orm_model",
        "to_orm_kwargs"
      ],
      "type_adapters": 1,
      "validation_patterns": []
    },
    {
      "name": "ApiRating",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/value_objetcs/api_rating.py",
      "base_classes": [
        "BaseValueObject[Rating, RatingSaModel]"
      ],
      "field_count": 5,
      "method_names": [
        "from_domain",
        "to_domain",
        "from_orm_model",
        "to_orm_kwargs"
      ],
      "type_adapters": 1,
      "validation_patterns": []
    },
    {
      "name": "ApiCreateTag",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/shared/api_schemas/commands/tag/create.py",
      "base_classes": [
        "BaseCommand[CreateTag, SaBase]"
      ],
      "field_count": 4,
      "method_names": [
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiDeleteTag",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/shared/api_schemas/commands/tag/delete.py",
      "base_classes": [
        "BaseCommand[DeleteTag, SaBase]"
      ],
      "field_count": 1,
      "method_names": [
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiRole",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/shared/api_schemas/value_objects/api_role.py",
      "base_classes": [
        "ApiSeedRole"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiUser",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/shared/api_schemas/value_objects/api_user.py",
      "base_classes": [
        "ApiSeedUser"
      ],
      "field_count": 2,
      "method_names": [
        "validate_roles",
        "to_domain",
        "from_domain",
        "from_orm_model",
        "to_orm_kwargs"
      ],
      "type_adapters": 0,
      "validation_patterns": [
        "field_validator(roles) -> validate_roles"
      ]
    },
    {
      "name": "BaseApiModel",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/seedwork/shared/adapters/api_schemas/base_api_model.py",
      "base_classes": [
        "BaseModel",
        "Generic[D, S]"
      ],
      "field_count": 0,
      "method_names": [
        "serialize_sets_to_lists",
        "_safe_to_domain",
        "_safe_from_domain",
        "_safe_to_orm_kwargs",
        "_safe_from_orm_model",
        "from_domain",
        "to_domain",
        "from_orm_model",
        "to_orm_kwargs"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "BaseValueObject",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/seedwork/shared/adapters/api_schemas/base_api_model.py",
      "base_classes": [
        "BaseApiModel[V, S]"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "BaseEntity",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/seedwork/shared/adapters/api_schemas/base_api_model.py",
      "base_classes": [
        "BaseApiModel[E, S]"
      ],
      "field_count": 5,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "BaseCommand",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/seedwork/shared/adapters/api_schemas/base_api_model.py",
      "base_classes": [
        "BaseApiModel[C, S]"
      ],
      "field_count": 0,
      "method_names": [],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiSeedRole",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/seedwork/shared/adapters/api_schemas/value_objects/role.py",
      "base_classes": [
        "BaseValueObject[SeedRole, RoleSaModel]"
      ],
      "field_count": 2,
      "method_names": [
        "validate_name",
        "validate_permissions",
        "from_domain",
        "to_domain",
        "from_orm_model",
        "to_orm_kwargs"
      ],
      "type_adapters": 0,
      "validation_patterns": [
        "field_validator(name) -> validate_name",
        "field_validator(permissions) -> validate_permissions"
      ]
    },
    {
      "name": "ApiSeedUser",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/seedwork/shared/adapters/api_schemas/value_objects/user.py",
      "base_classes": [
        "BaseValueObject[SeedUser, UserSaModel]"
      ],
      "field_count": 2,
      "method_names": [
        "validate_id",
        "validate_roles",
        "from_domain",
        "to_domain",
        "from_orm_model",
        "to_orm_kwargs"
      ],
      "type_adapters": 0,
      "validation_patterns": [
        "field_validator(id) -> validate_id",
        "field_validator(roles) -> validate_roles"
      ]
    },
    {
      "name": "ApiAddress",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/shared_kernel/adapters/api_schemas/value_objects/address.py",
      "base_classes": [
        "BaseValueObject[Address, SaBase]"
      ],
      "field_count": 8,
      "method_names": [
        "from_domain",
        "to_domain",
        "from_orm_model",
        "to_orm_kwargs"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiContactInfo",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/shared_kernel/adapters/api_schemas/value_objects/contact_info.py",
      "base_classes": [
        "BaseValueObject[ContactInfo, SaBase]"
      ],
      "field_count": 4,
      "method_names": [
        "from_domain",
        "to_domain",
        "from_orm_model",
        "to_orm_kwargs"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiNutriFacts",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/shared_kernel/adapters/api_schemas/value_objects/nutri_facts.py",
      "base_classes": [
        "BaseValueObject[NutriFacts, SaBase]"
      ],
      "field_count": 83,
      "method_names": [
        "from_domain",
        "to_domain",
        "to_orm_kwargs"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiNutriValue",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/shared_kernel/adapters/api_schemas/value_objects/nutri_value.py",
      "base_classes": [
        "BaseValueObject[NutriValue, SaBase]"
      ],
      "field_count": 2,
      "method_names": [
        "from_domain",
        "to_domain",
        "to_orm_kwargs"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiProfile",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/shared_kernel/adapters/api_schemas/value_objects/profile.py",
      "base_classes": [
        "BaseValueObject[Profile, SaBase]"
      ],
      "field_count": 3,
      "method_names": [
        "from_domain",
        "to_domain",
        "from_orm_model",
        "to_orm_kwargs"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    },
    {
      "name": "ApiTag",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/shared_kernel/adapters/api_schemas/value_objects/tag/tag.py",
      "base_classes": [
        "BaseValueObject[Tag, TagSaModel]"
      ],
      "field_count": 4,
      "method_names": [
        "from_domain",
        "to_domain",
        "from_orm_model",
        "to_orm_kwargs"
      ],
      "type_adapters": 1,
      "validation_patterns": []
    },
    {
      "name": "ApiTagFilter",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/shared_kernel/adapters/api_schemas/value_objects/tag/tag_filter.py",
      "base_classes": [
        "BaseModel"
      ],
      "field_count": 7,
      "method_names": [
        "to_domain"
      ],
      "type_adapters": 0,
      "validation_patterns": []
    }
  ],
  "type_adapters": [
    {
      "name": "MenuMealFrozensetAdapter",
      "type_definition": "frozenset[ApiMenuMeal]",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/entities/api_menu.py",
      "line_number": 13
    },
    {
      "name": "RecipeListAdapter",
      "type_definition": "list[ApiRecipe]",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/entities/api_recipe.py",
      "line_number": 197
    },
    {
      "name": "IngredientListAdapter",
      "type_definition": "list[ApiIngredient]",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/value_objetcs/api_ingredient.py",
      "line_number": 83
    },
    {
      "name": "RatingListAdapter",
      "type_definition": "list[ApiRating]",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/value_objetcs/api_rating.py",
      "line_number": 77
    },
    {
      "name": "JsonSafeListAdapter",
      "type_definition": "list",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/seedwork/shared/adapters/api_schemas/type_adapters.py",
      "line_number": 256
    },
    {
      "name": "JsonSafeSetAdapter",
      "type_definition": "list",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/seedwork/shared/adapters/api_schemas/type_adapters.py",
      "line_number": 257
    },
    {
      "name": "RoleSetAdapter",
      "type_definition": "set[ApiSeedRole]",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/seedwork/shared/adapters/api_schemas/type_adapters.py",
      "line_number": 263
    },
    {
      "name": "adapter",
      "type_definition": "list[item_type]",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/seedwork/shared/adapters/api_schemas/type_adapters.py",
      "line_number": 67
    },
    {
      "name": "TagFrozensetAdapter",
      "type_definition": "frozenset[ApiTag]",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/shared_kernel/adapters/api_schemas/value_objects/tag/tag.py",
      "line_number": 44
    }
  ],
  "inconsistencies": [
    "TypeAdapter naming issue: adapter should end with 'Adapter' (/home/jap/projects/menu-planning/backend/services/app/src/contexts/seedwork/shared/adapters/api_schemas/type_adapters.py:67)",
    "ApiUser has fields but no validation patterns defined",
    "ApiRole has fields but no validation patterns defined",
    "ApiCreateClassification has fields but no validation patterns defined",
    "ApiUpdateClassification has fields but no validation patterns defined",
    "ApiAddFoodProduct has fields but no validation patterns defined",
    "ApiAddHouseInputAndCreateProductIfNeeded has fields but no validation patterns defined",
    "ApiAddProductImage has fields but no validation patterns defined",
    "ApiClassification has fields but no validation patterns defined",
    "ApiClassificationFilter has fields but no validation patterns defined",
    "ApiProductFilter has fields but no validation patterns defined",
    "ApiIsFoodVotes has fields but no validation patterns defined",
    "ApiScore has fields but no validation patterns defined",
    "ApiUser has fields but no validation patterns defined",
    "ApiCreateClient has fields but no validation patterns defined",
    "ApiCreateMenu has fields but no validation patterns defined",
    "ApiDeleteClient has fields but no validation patterns defined",
    "ApiDeleteMenu has fields but no validation patterns defined",
    "ApiAttributesToUpdateOnClient has fields but no validation patterns defined",
    "ApiUpdateClient has fields but no validation patterns defined",
    "ApiAttributesToUpdateOnMenu has fields but no validation patterns defined",
    "ApiUpdateMenu has fields but no validation patterns defined",
    "ApiMenuFilter has fields but no validation patterns defined",
    "ApiClientFilter has fields but no validation patterns defined",
    "ApiMenuMeal has fields but no validation patterns defined",
    "ApiCopyMeal has fields but no validation patterns defined",
    "ApiCopyRecipe has fields but no validation patterns defined",
    "ApiDeleteMeal has fields but no validation patterns defined",
    "ApiDeleteRecipe has fields but no validation patterns defined",
    "ApiRateRecipe has fields but no validation patterns defined",
    "ApiUpdateMeal has fields but no validation patterns defined",
    "ApiUpdateRecipe has fields but no validation patterns defined",
    "ApiRecipeFilter has fields but no validation patterns defined",
    "ApiMealFilter has fields but no validation patterns defined",
    "ApiIngredient has fields but no validation patterns defined",
    "ApiRating has fields but no validation patterns defined",
    "ApiCreateTag has fields but no validation patterns defined",
    "ApiDeleteTag has fields but no validation patterns defined",
    "BaseEntity has fields but no validation patterns defined",
    "ApiAddress has fields but no validation patterns defined",
    "ApiContactInfo has fields but no validation patterns defined",
    "ApiNutriFacts has fields but no validation patterns defined",
    "ApiNutriValue has fields but no validation patterns defined",
    "ApiProfile has fields but no validation patterns defined",
    "ApiTag has fields but no validation patterns defined",
    "ApiTagFilter has fields but no validation patterns defined"
  ],
  "file_errors": [],
  "performance_metrics": {
    "analysis_time_seconds": 0.048241376876831055,
    "files_per_second": 1865.6183928950918,
    "average_schemas_per_file": 0.9333333333333333
  },
  "detailed_schemas": [
    {
      "name": "ApiAssignRoleToUser",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/iam/core/adapters/api_schemas/commands/api_assign_role_to_user.py",
      "line_number": 8,
      "base_classes": [
        "BaseCommand[AssignRoleToUser, SaBase]"
      ],
      "fields": {
        "user_id": "str",
        "role": "ApiRole"
      },
      "methods": [
        {
          "name": "validate_user_id",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "str",
          "decorators": [
            "field_validator('user_id')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "AssignRoleToUser",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiAssignRoleToUser'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to assign a role to a user via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        user_id (str): ID of the user.\n        role (ApiRole): The role to assign to the user.\n\n    Methods:\n        to_domain() -> AssignRoleToUser:\n            Converts the instance to a domain model object for assigning a role to a user.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [
        "field_validator(user_id) -> validate_user_id"
      ],
      "computed_properties": []
    },
    {
      "name": "ApiCreateUser",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/iam/core/adapters/api_schemas/commands/api_create_user.py",
      "line_number": 7,
      "base_classes": [
        "BaseCommand[CreateUser, SaBase]"
      ],
      "fields": {
        "user_id": "str"
      },
      "methods": [
        {
          "name": "validate_user_id",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "str",
          "decorators": [
            "field_validator('user_id')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "CreateUser",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiCreateUser'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to create a new user via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        user_id (str): ID of the user. (required)\n\n    Methods:\n        to_domain() -> CreateUser:\n            Converts the instance to a domain model object for creating a user.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [
        "field_validator(user_id) -> validate_user_id"
      ],
      "computed_properties": []
    },
    {
      "name": "ApiRemoveRoleFromUser",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/iam/core/adapters/api_schemas/commands/api_remove_role_from_user.py",
      "line_number": 8,
      "base_classes": [
        "BaseCommand[RemoveRoleFromUser, SaBase]"
      ],
      "fields": {
        "user_id": "str",
        "role": "ApiRole"
      },
      "methods": [
        {
          "name": "validate_user_id",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "str",
          "decorators": [
            "field_validator('user_id')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "RemoveRoleFromUser",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiRemoveRoleFromUser'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to remove a role from a user via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        user_id (str): ID of the user.\n        role (ApiRole): The role to remove from the user.\n\n    Methods:\n        to_domain() -> RemoveRoleFromUser:\n            Converts the instance to a domain model object for removing a role from a user.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [
        "field_validator(user_id) -> validate_user_id"
      ],
      "computed_properties": []
    },
    {
      "name": "ApiUser",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/iam/core/adapters/api_schemas/root_aggregate/user.py",
      "line_number": 12,
      "base_classes": [
        "BaseEntity[User, UserSaModel]"
      ],
      "fields": {
        "roles": "set[ApiRole]"
      },
      "methods": [
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiUser'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "User",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "'ApiUser'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "A Pydantic model representing and validating user data for API requests and responses.\n    \n    This model is used for input validation and serialization of domain objects in API requests and responses.\n    It inherits from BaseEntity which provides common fields and configuration.\n    \n    Attributes:\n        id (str): The unique identifier of the user\n        roles (set[ApiRole]): set of roles assigned to the user\n        discarded (bool): Whether the user is discarded\n        version (int): Version number for optimistic locking\n        created_at (datetime): When the user was created\n        updated_at (datetime): When the user was last updated\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiRole",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/iam/core/adapters/api_schemas/value_objects/api_role.py",
      "line_number": 7,
      "base_classes": [
        "BaseValueObject[Role, RoleSaModel]"
      ],
      "fields": {
        "name": "str",
        "context": "str",
        "permissions": "list[str]"
      },
      "methods": [
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiRole'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "Role",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "'ApiRole'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "dict",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "A class to represent and validate a role in the IAM context.",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiCreateClassification",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/api_create_classification.py",
      "line_number": 10,
      "base_classes": [
        "BaseModel"
      ],
      "fields": {
        "name": "str",
        "author_id": "str",
        "description": "str | None",
        "command_type": "ClassVar[type[CreateClassification]]"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "CreateClassification",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the the data required\n    to add a new classification via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        name (str): Name of the classification.\n        author_id (str): The id of the user adding the classification.\n        privacy (Privacy, optional): Privacy setting of the classification.\n        description (str, optional): Detailed description of the classification.\n\n    Methods:\n        to_domain() -> Createclassification:\n            Converts the instance to a domain model object for adding a classification.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiUpdateClassification",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/api_update_classification.py",
      "line_number": 52,
      "base_classes": [
        "BaseModel"
      ],
      "fields": {
        "id": "str",
        "updates": "_ApiAttributesToUpdateOnClassification",
        "command_type": "ClassVar[type[UpdateClassification]]"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "UpdateClassification",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the the data required\n    to update a product classification via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        id (str): Identifier of the classification to update.\n        updates (ApiAttributesToUpdateOnRecipe): Attributes to update.\n\n    Methods:\n        to_domain() -> UpdateRecipe:\n            Converts the instance to a domain model object for updating a product.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiCreateBrand",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/brand/api_create_brand.py",
      "line_number": 9,
      "base_classes": [
        "ApiCreateClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiUpdateBrand",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/brand/api_update_brand.py",
      "line_number": 9,
      "base_classes": [
        "ApiUpdateClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiCreateCategory",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/category/api_create_category.py",
      "line_number": 9,
      "base_classes": [
        "ApiCreateClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiUpdateCategory",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/category/api_update_category.py",
      "line_number": 9,
      "base_classes": [
        "ApiUpdateClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiCreateFoodGroup",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/food_group/api_create_food_group.py",
      "line_number": 9,
      "base_classes": [
        "ApiCreateClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiUpdateFoodGroup",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/food_group/api_update_food_group.py",
      "line_number": 9,
      "base_classes": [
        "ApiUpdateClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiCreateParentCategory",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/parent_category/api_create_parent_category.py",
      "line_number": 9,
      "base_classes": [
        "ApiCreateClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiUpdateParentCategory",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/parent_category/api_update_parent_category.py",
      "line_number": 9,
      "base_classes": [
        "ApiUpdateClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiCreateProcessType",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/process_type/api_create_process_type.py",
      "line_number": 9,
      "base_classes": [
        "ApiCreateClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiUpdateProcessType",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/process_type/api_update_process_type.py",
      "line_number": 9,
      "base_classes": [
        "ApiUpdateClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiCreateSource",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/source/api_create_source.py",
      "line_number": 9,
      "base_classes": [
        "ApiCreateClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiUpdateSource",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/classification/source/api_update_source.py",
      "line_number": 9,
      "base_classes": [
        "ApiUpdateClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiAddFoodProduct",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/products/api_add_food_product.py",
      "line_number": 13,
      "base_classes": [
        "BaseModel"
      ],
      "fields": {
        "source_id": "str",
        "name": "str",
        "nutri_facts": "ApiNutriFacts",
        "category_id": "str | None",
        "parent_category_id": "str | None",
        "ingredients": "str | None",
        "food_group_id": "str | None",
        "process_type_id": "str | None",
        "package_size": "float | None",
        "package_size_unit": "Unit | None",
        "score": "dict | None",
        "brand_id": "str | None",
        "barcode": "str | None",
        "image_url": "str | None",
        "json_data": "str | None"
      },
      "methods": [
        {
          "name": "serialize_package_size_unit",
          "args": [
            "self",
            "unit",
            "_info"
          ],
          "return_type": null,
          "decorators": [
            "field_serializer('package_size_unit')"
          ],
          "is_classmethod": false
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "AddFoodProduct",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the the data required\n    to add a new food product via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        source_id (str): The source of the information about product.\n        name (str): The name of the product.\n        nutri_facts (ApiNutriFacts): The nutritional facts of the product.\n        category_id (str): The id of the category the product id part of.\n        parent_category_id (str): The id of the parent category the product is part of.\n        ingredients (str): The ingredients of the product.\n        food_group_id (str): The id of the food group the product is part of.\n        process_type_id (str): The id of the process type the product is part of.\n        package_size (float): The size of the package the product comes in.\n        package_size_unit (ApiUnit): The unit of the package size.\n        score (dict): The score of the product.\n        brand_id (str): The id of the brand the product is part of.\n        barcode (str): The barcode of the product.\n        image_url (str): The url of the image of the product.\n        json_data (str): The json data of the product.\n\n        Raises:\n            ValueError: If the conversion to domain model fails.\n\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiAddHouseInputAndCreateProductIfNeeded",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/products/api_add_house_input_and_create_product_if_needed.py",
      "line_number": 11,
      "base_classes": [
        "BaseModel"
      ],
      "fields": {
        "barcode": "UniqueBarcode",
        "house_id": "str",
        "is_food": "bool"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "AddHouseInputAndCreateProductIfNeeded",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    for a house to mark the product as food or non food via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        barcode (str): The barcode of the product.\n        house_id (str): The id of the house.\n        is_food (bool): Whether the product is food or not.\n\n    Raises:\n        ValueError: If the conversion to domain model fails.\n\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiAddProductImage",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/commands/products/api_add_product_image.py",
      "line_number": 8,
      "base_classes": [
        "BaseModel"
      ],
      "fields": {
        "product_id": "str",
        "image_url": "str"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "AddProductImage",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the the data required\n    to add an image to a product via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        product_id (str): The id of the product to add the image to.\n        image_url (str): The url of the image to add to the product.\n\n    Raises:\n        ValueError: If the conversion to domain model fails.\n\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiBrand",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/entities/classifications/api_brand.py",
      "line_number": 7,
      "base_classes": [
        "ApiClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiCategory",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/entities/classifications/api_category.py",
      "line_number": 7,
      "base_classes": [
        "ApiClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiClassification",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/entities/classifications/api_classification.py",
      "line_number": 8,
      "base_classes": [
        "BaseModel"
      ],
      "fields": {
        "id": "str",
        "name": "str",
        "author_id": "str",
        "description": "str | None",
        "created_at": "CreatedAtValue | None",
        "updated_at": "CreatedAtValue | None",
        "discarded": "bool",
        "version": "int",
        "entity_type": "ClassVar[type[Classification]]"
      },
      "methods": [
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiClassification'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "Classification",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating a recipe classification.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        id (str): Unique identifier of the classification.\n        name (str): Name of the classification.\n        author_id (str): Identifier of the recipes's author.\n        privacy (Privacy): Privacy setting of the classification.\n        description (str, optional): Description of the classification.\n\n    Methods:\n        from_domain(domain_obj: Classification) -> \"ApiClassification\":\n            Creates an instance of `ApiClassification` from a domain model object.\n        to_domain() -> Classification:\n            Converts the instance to a domain model object.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiClassificationFilter",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/entities/classifications/api_classification_filter.py",
      "line_number": 6,
      "base_classes": [
        "BaseModel"
      ],
      "fields": {
        "name": "str | None",
        "author_id": "str | None",
        "created_at_gte": "CreatedAtValue | None",
        "created_at_lte": "CreatedAtValue | None",
        "skip": "int | None",
        "limit": "int | None",
        "sort": "str | None"
      },
      "methods": [],
      "docstring": "\n    A Pydantic model representing and validating a filter for recipe classifications.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        name (str, optional): Name of the classification.\n        author_id (str, optional): Identifier of the classification's author.\n\n    Methods:\n        to_domain() -> dict:\n            Converts the instance to a dictionary for use in a domain model object.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiFoodGroup",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/entities/classifications/api_food_group.py",
      "line_number": 9,
      "base_classes": [
        "ApiClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiParentCategory",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/entities/classifications/api_parent_category.py",
      "line_number": 9,
      "base_classes": [
        "ApiClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiProcessType",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/entities/classifications/api_process_type.py",
      "line_number": 9,
      "base_classes": [
        "ApiClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiSource",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/entities/classifications/api_source.py",
      "line_number": 7,
      "base_classes": [
        "ApiClassification"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiProduct",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/root_aggregate/api_product.py",
      "line_number": 18,
      "base_classes": [
        "BaseModel"
      ],
      "fields": {
        "id": "str",
        "source_id": "str",
        "name": "str",
        "is_food": "bool | None",
        "shopping_name": "str | None",
        "store_department_name": "str | None",
        "recommended_brands_and_products": "str | None",
        "edible_yield": "float | None",
        "kg_per_unit": "float | None",
        "liters_per_kg": "float | None",
        "nutrition_group": "str | None",
        "cooking_factor": "float | None",
        "conservation_days": "int | None",
        "substitutes": "str | None",
        "barcode": "str | None",
        "brand_id": "str | None",
        "category_id": "str | None",
        "parent_category_id": "str | None",
        "score": "ApiScore | None",
        "food_group_id": "str | None",
        "process_type_id": "str | None",
        "nutri_facts": "ApiNutriFacts | None",
        "ingredients": "str | None",
        "package_size": "float | None",
        "package_size_unit": "Unit | None",
        "image_url": "str | None",
        "created_at": "CreatedAtValue | None",
        "updated_at": "CreatedAtValue | None",
        "json_data": "str | None",
        "discarded": "bool",
        "version": "int",
        "is_food_votes": "ApiIsFoodVotes | None",
        "is_food_houses_choice": "bool | None"
      },
      "methods": [
        {
          "name": "model_dump",
          "args": [
            "self"
          ],
          "return_type": null,
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "check_edible_yield_range",
          "args": [
            "cls",
            "value"
          ],
          "return_type": "float",
          "decorators": [
            "field_validator('edible_yield')"
          ],
          "is_classmethod": false
        },
        {
          "name": "serialize_package_size_unit",
          "args": [
            "self",
            "unit",
            "_info"
          ],
          "return_type": null,
          "decorators": [
            "field_serializer('package_size_unit')"
          ],
          "is_classmethod": false
        },
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiProduct'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "Product",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A pydantic model for the Product entity.\n\n    This model is used to validate the input and output of the API endpoints.\n\n    It is also used to convert the domain object to and from the API model.\n\n    ",
      "validation_patterns": [
        "field_validator(edible_yield) -> check_edible_yield_range"
      ],
      "computed_properties": []
    },
    {
      "name": "ApiProductFilter",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/root_aggregate/api_product_filter.py",
      "line_number": 6,
      "base_classes": [
        "BaseModel"
      ],
      "fields": {
        "id": "str | list[str] | None",
        "source": "str | list[str] | None",
        "name": "str | list[str] | None",
        "is_food": "bool | None",
        "barcode": "str | list[str] | None",
        "brand": "str | None",
        "category": "str | list[str] | None",
        "parent_category": "str | list[str] | None",
        "food_group": "str | list[str] | None",
        "process_type": "str | list[str] | None",
        "skip": "int | None",
        "limit": "int | None",
        "sort": "str | None",
        "created_at_gte": "str | None",
        "created_at_lte": "str | None"
      },
      "methods": [
        {
          "name": "filter_must_be_allowed_by_repo",
          "args": [
            "cls",
            "values"
          ],
          "return_type": null,
          "decorators": [
            "model_validator(mode='before')",
            "classmethod"
          ],
          "is_classmethod": true
        }
      ],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiIsFoodVotes",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/value_objects/api_if_food_votes.py",
      "line_number": 11,
      "base_classes": [
        "BaseModel"
      ],
      "fields": {
        "acceptance_line": "dict[float, float | None]",
        "is_food_houses": "set[str]",
        "is_not_food_houses": "set[str]"
      },
      "methods": [
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiIsFoodVotes'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "IsFoodVotes",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the score of a food item.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiScore",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/value_objects/api_score.py",
      "line_number": 12,
      "base_classes": [
        "BaseModel"
      ],
      "fields": {
        "final": "ScoreValue",
        "ingredients": "ScoreValue",
        "nutrients": "ScoreValue"
      },
      "methods": [
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "Optional['ApiScore']",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "Score",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the score of a food item.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n\n        final (ScoreValue): The final score of the food item, which is an\n            instance of the `ScoreValue` class defined in the codebase.\n\n        ingredients (ScoreValue): The ingredients score of the food item,\n            which is an instance of the `ScoreValue` class defined in the\n            codebase.\n\n        nutrients (ScoreValue): The nutrients score of the food item, which\n            is an instance of the `ScoreValue` class defined in the codebase.\n\n    Methods:\n        from_domain(domain_obj: Score | None) -> Optional[\"ApiScore\"]:\n            Creates an instance of `ApiScore` from a domain model object.\n        to_domain() -> Score:\n            Converts the instance to a domain model object.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model or\n            if it this class cannot be instantiated from a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiUser",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/api_schemas/value_objects/api_user.py",
      "line_number": 12,
      "base_classes": [
        "ApiSeedUser"
      ],
      "fields": {
        "domain_user_type": "ClassVar[type[SeedUser]]",
        "role_type": "ClassVar[type[SeedRole]]"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "User",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiUser'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        }
      ],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiRole",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/products_catalog/core/adapters/internal_providers/iam/api_schemas/role.py",
      "line_number": 6,
      "base_classes": [
        "ApiSeedRole"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiCreateClient",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/commands/create_client.py",
      "line_number": 8,
      "base_classes": [
        "BaseCommand[CreateClient, SaBase]"
      ],
      "fields": {
        "author_id": "UUIDId",
        "profile": "ClientProfile",
        "contact_info": "ClientContactInfo",
        "address": "ClientAddress",
        "tags": "ClientTags",
        "notes": "ClientNotes"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "CreateClient",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to add a new client via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        author_id (str): ID of the user who created the client.\n        profile (ApiProfile): Profile information of the client.\n        contact_info (ApiContactInfo, optional): Contact information of the client.\n        address (ApiAddress, optional): Address of the client.\n        tags (set[ApiTag]): Set of tags associated with the client.\n        notes (str, optional): Additional notes about the client.\n\n    Methods:\n        to_domain() -> CreateClient:\n            Converts the instance to a domain model object for creating a client.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiCreateMenu",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/commands/create_menu.py",
      "line_number": 8,
      "base_classes": [
        "BaseCommand[CreateMenu, SaBase]"
      ],
      "fields": {
        "client_id": "UUIDId",
        "description": "MenuDescription",
        "tags": "MenuTags"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "CreateMenu",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to add a new menu via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        client_id (str): ID of the client the menu belongs to.\n        description (str, optional): Description of the menu.\n        tags (frozenset[ApiTag], optional): Tags associated with the menu.\n\n    Methods:\n        to_domain() -> CreateMenu:\n            Converts the instance to a domain model object for creating a menu.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiDeleteClient",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/commands/delete_client.py",
      "line_number": 7,
      "base_classes": [
        "BaseCommand[DeleteClient, SaBase]"
      ],
      "fields": {
        "client_id": "UUIDId"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "DeleteClient",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to delete a client via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        client_id (str): ID of the client to delete.\n\n    Methods:\n        to_domain() -> DeleteClient:\n            Converts the instance to a domain model object for deleting a client.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiDeleteMenu",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/commands/delete_menu.py",
      "line_number": 6,
      "base_classes": [
        "BaseCommand[DeleteMenu, SaBase]"
      ],
      "fields": {
        "menu_id": "UUIDId"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "DeleteMenu",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to delete a menu via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        menu_id (str): ID of the menu to delete.\n\n    Methods:\n        to_domain() -> DeleteMenu:\n            Converts the instance to a domain model object for deleting a menu.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiAttributesToUpdateOnClient",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/commands/update_client.py",
      "line_number": 16,
      "base_classes": [
        "BaseCommand[UpdateClient, SaBase]"
      ],
      "fields": {
        "profile": "ClientProfile | None",
        "contact_info": "ClientContactInfo | None",
        "address": "ClientAddress | None",
        "tags": "ClientTags | None",
        "notes": "ClientNotes | None"
      },
      "methods": [
        {
          "name": "serialize_profile",
          "args": [
            "self",
            "profile",
            "_info"
          ],
          "return_type": null,
          "decorators": [
            "field_serializer('profile')"
          ],
          "is_classmethod": false
        },
        {
          "name": "serialize_contact_info",
          "args": [
            "self",
            "contact_info",
            "_info"
          ],
          "return_type": null,
          "decorators": [
            "field_serializer('contact_info')"
          ],
          "is_classmethod": false
        },
        {
          "name": "serialize_address",
          "args": [
            "self",
            "address",
            "_info"
          ],
          "return_type": null,
          "decorators": [
            "field_serializer('address')"
          ],
          "is_classmethod": false
        },
        {
          "name": "serialize_tags",
          "args": [
            "self",
            "tags",
            "_info"
          ],
          "return_type": null,
          "decorators": [
            "field_serializer('tags')"
          ],
          "is_classmethod": false
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to update a client via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        profile (ApiProfile, optional): Profile information of the client.\n        contact_info (ApiContactInfo, optional): Contact information of the client.\n        address (ApiAddress, optional): Address of the client.\n        tags (set[ApiTag], optional): Tags associated with the client.\n        notes (str, optional): Additional notes about the client.\n\n    Methods:\n        to_domain() -> dict:\n            Converts the instance to a dictionary of attributes to update.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiUpdateClient",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/commands/update_client.py",
      "line_number": 76,
      "base_classes": [
        "BaseCommand[UpdateClient, SaBase]"
      ],
      "fields": {
        "client_id": "UUIDId",
        "updates": "ApiAttributesToUpdateOnClient"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "UpdateClient",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_api_client",
          "args": [
            "cls",
            "api_client"
          ],
          "return_type": "'ApiUpdateClient'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to update a client via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        client_id (str): ID of the client to update.\n        updates (ApiAttributesToUpdateOnClient): Attributes to update.\n\n    Methods:\n        to_domain() -> UpdateClient:\n            Converts the instance to a domain model object for updating a client.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiAttributesToUpdateOnMenu",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/commands/update_menu.py",
      "line_number": 11,
      "base_classes": [
        "BaseCommand[UpdateMenu, SaBase]"
      ],
      "fields": {
        "name": "MenuName | None",
        "description": "MenuDescription",
        "notes": "MenuNotes",
        "tags": "MenuTags"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to update a menu via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        name (str, optional): Name of the menu.\n        description (str, optional): Description of the menu.\n        notes (str, optional): Additional notes about the menu.\n        tags (frozenset[ApiTag], optional): Tags associated with the menu.\n\n    Methods:\n        to_domain() -> dict:\n            Converts the instance to a dictionary of attributes to update.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiUpdateMenu",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/commands/update_menu.py",
      "line_number": 49,
      "base_classes": [
        "BaseCommand[UpdateMenu, SaBase]"
      ],
      "fields": {
        "menu_id": "UUIDId",
        "updates": "ApiAttributesToUpdateOnMenu"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "UpdateMenu",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_api_menu",
          "args": [
            "cls",
            "api_menu"
          ],
          "return_type": "'ApiUpdateMenu'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to update a menu via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        menu_id (str): ID of the menu to update.\n        updates (ApiAttributesToUpdateOnMenu): Attributes to update.\n\n    Methods:\n        to_domain() -> UpdateMenu:\n            Converts the instance to a domain model object for updating a menu.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiMenu",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/entities/api_menu.py",
      "line_number": 15,
      "base_classes": [
        "BaseEntity[Menu, MenuSaModel]"
      ],
      "fields": {
        "id": "UUIDId",
        "author_id": "UUIDId",
        "client_id": "UUIDId",
        "meals": "MenuMeals",
        "tags": "MenuTags",
        "description": "MenuDescription"
      },
      "methods": [
        {
          "name": "validate_meals",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "frozenset[ApiMenuMeal]",
          "decorators": [
            "field_validator('meals')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "validate_tags",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "frozenset[ApiTag]",
          "decorators": [
            "field_validator('tags')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiMenu'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "Menu",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "'ApiMenu'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating a menu encompassing\n    details about the menu, its meals, and additional metadata.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        id (str): Unique identifier of the menu.\n        author_id (str): Unique identifier of the user who created the menu.\n        client_id (str): Unique identifier of the client the menu is associated with.\n        meals (frozenset[ApiMenuMeal]): Frozenset of meals on a menu with week, weekday and meal_id.\n        tags (frozenset[ApiTag]): Frozenset of tags associated with the menu.\n        description (str | None): Description of the menu.\n        created_at (datetime): Timestamp of when the menu was created.\n        updated_at (datetime): Timestamp of when the menu was last updated.\n        discarded (bool): Flag indicating if the menu is discarded.\n        version (int): Version of the menu.\n    ",
      "validation_patterns": [
        "field_validator(meals) -> validate_meals",
        "field_validator(tags) -> validate_tags"
      ],
      "computed_properties": []
    },
    {
      "name": "ApiMenuFilter",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/entities/api_menu_filter.py",
      "line_number": 9,
      "base_classes": [
        "BaseModel"
      ],
      "fields": {
        "id": "str | list[str] | None",
        "author_id": "str | list[str] | None",
        "client_id": "str | list[str] | None",
        "tags": "str | None",
        "description": "str | None",
        "created_at_gte": "CreatedAtValue | None",
        "created_at_lte": "CreatedAtValue | None",
        "discarded": "bool | None",
        "skip": "int | None",
        "limit": "int | None",
        "sort": "str | None"
      },
      "methods": [
        {
          "name": "model_dump",
          "args": [
            "self"
          ],
          "return_type": null,
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "filter_must_be_allowed_by_repo",
          "args": [
            "cls",
            "values"
          ],
          "return_type": null,
          "decorators": [
            "model_validator(mode='before')",
            "classmethod"
          ],
          "is_classmethod": true
        }
      ],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiClient",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/root_aggregate/api_client.py",
      "line_number": 17,
      "base_classes": [
        "BaseEntity[Client, ClientSaModel]"
      ],
      "fields": {
        "id": "UUIDId",
        "author_id": "UUIDId",
        "profile": "ClientProfile",
        "contact_info": "ClientContactInfo",
        "address": "ClientAddress",
        "tags": "ClientTags",
        "menus": "ClientMenus",
        "notes": "ClientNotes"
      },
      "methods": [
        {
          "name": "validate_tags",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "frozenset[ApiTag]",
          "decorators": [
            "field_validator('tags')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiClient'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "Client",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "'ApiClient'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating a client encompassing\n    details about the client, their profile, contact information, and\n    additional metadata.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        id (str): Unique identifier of the client.\n        author_id (str): ID of the user who created the client.\n        profile (ApiProfile): Profile information of the client.\n        contact_info (ApiContactInfo, optional): Contact information of the client.\n        address (ApiAddress, optional): Address of the client.\n        tags (frozenset[ApiTag]): Frozenset of tags associated with the client.\n        menus (list[ApiMenu]): List of menus associated with the client.\n        notes (str, optional): Additional notes about the client.\n        created_at (datetime): Timestamp of client creation.\n        updated_at (datetime): Timestamp of last update.\n        discarded (bool): Indicates if the client is discarded.\n        version (int): Version of the client.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model or\n            if it this class cannot be instantiated from a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [
        "field_validator(tags) -> validate_tags"
      ],
      "computed_properties": []
    },
    {
      "name": "ApiClientFilter",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/root_aggregate/api_client_filter.py",
      "line_number": 8,
      "base_classes": [
        "BaseModel"
      ],
      "fields": {
        "id": "str | list[str] | None",
        "menu_id": "str | list[str] | None",
        "created_at_gte": "CreatedAtValue | None",
        "created_at_lte": "CreatedAtValue | None",
        "skip": "int | None",
        "limit": "int | None",
        "sort": "str | None"
      },
      "methods": [
        {
          "name": "filter_must_be_allowed_by_repo",
          "args": [
            "cls",
            "values"
          ],
          "return_type": null,
          "decorators": [
            "model_validator(mode='before')",
            "classmethod"
          ],
          "is_classmethod": true
        }
      ],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiMenuMeal",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/client/api_schemas/value_objects/api_menu_meal.py",
      "line_number": 15,
      "base_classes": [
        "BaseValueObject[MenuMeal, MenuMealSaModel]"
      ],
      "fields": {
        "meal_id": "UUIDId",
        "meal_name": "MealName",
        "nutri_facts": "Optional[ApiNutriFacts]",
        "week": "WeekNumber",
        "weekday": "Weekday",
        "hour": "MealTime",
        "meal_type": "MealType"
      },
      "methods": [
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiMenuMeal'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "MenuMeal",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "'ApiMenuMeal'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating a meal in a menu.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        meal_id (str): The unique identifier of the meal.\n        meal_name (str): The name of the meal.\n        nutri_facts (ApiNutriFacts, optional): The nutritional facts of the meal.\n        week (int): The week number in the menu.\n        weekday (str): The day of the week.\n        hour (time, optional): The time of the meal.\n        meal_type (str): The type of meal (e.g., breakfast, lunch, dinner).\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiRole",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/internal_providers/iam/api_schemas/role.py",
      "line_number": 6,
      "base_classes": [
        "ApiSeedRole"
      ],
      "fields": {},
      "methods": [],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiCopyMeal",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/copy_meal.py",
      "line_number": 7,
      "base_classes": [
        "BaseModel"
      ],
      "fields": {
        "id_of_user_coping_meal": "UUIDId",
        "meal_id": "UUIDId",
        "id_of_target_menu": "UUIDId"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "CopyMeal",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the the data required\n    to copy a meal via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        id_of_user_coping_meal (str): ID of the user.\n        meal_id (str): ID of the meal.\n        id_of_target_menu (str): ID of the target menu.\n\n    Methods:\n        to_domain() -> CopyMeal:\n            Converts the instance to a domain model object for copying a meal.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiCopyRecipe",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/copy_recipe.py",
      "line_number": 10,
      "base_classes": [
        "BaseCommand[CopyRecipe, SaBase]"
      ],
      "fields": {
        "user_id": "UUIDId",
        "recipe_id": "UUIDId",
        "meal_id": "UUIDId"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "CopyRecipe",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to copy a recipe via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        user_id (str): ID of the user copying the recipe.\n        recipe_id (str): ID of the recipe to copy.\n        meal_id (str): ID of the meal to copy the recipe to.\n\n    Methods:\n        to_domain() -> CopyRecipe:\n            Converts the instance to a domain model object for copying a recipe.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiCreateMeal",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/create_meal.py",
      "line_number": 11,
      "base_classes": [
        "BaseCommand[CreateMeal, SaBase]"
      ],
      "fields": {
        "name": "MealName",
        "author_id": "UUIDId",
        "menu_id": "UUIDId",
        "recipes": "MealRecipes",
        "tags": "MealTags",
        "description": "MealDescription",
        "notes": "MealNotes",
        "image_url": "MealImageUrl"
      },
      "methods": [
        {
          "name": "validate_recipes",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "list[ApiRecipe]",
          "decorators": [
            "field_validator('recipes')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "validate_tags",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "frozenset[ApiTag]",
          "decorators": [
            "field_validator('tags')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "CreateMeal",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to add a new meal via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        name (str): Name of the meal.\n        author_id (str): ID of the user who created the meal.\n        menu_id (str): ID of the menu to add the meal to.\n        recipes (list[ApiRecipe], optional): Recipes that make up the meal.\n        tags (frozenset[ApiTag], optional): Tags associated with the meal.\n        description (str, optional): Description of the meal.\n        notes (str, optional): Additional notes about the meal.\n        image_url (str, optional): URL of an image of the meal.\n\n    Methods:\n        to_domain() -> CreateMeal:\n            Converts the instance to a domain model object for creating a meal.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [
        "field_validator(recipes) -> validate_recipes",
        "field_validator(tags) -> validate_tags"
      ],
      "computed_properties": []
    },
    {
      "name": "ApiCreateRecipe",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/create_recipe.py",
      "line_number": 17,
      "base_classes": [
        "BaseCommand[CreateRecipe, SaBase]"
      ],
      "fields": {
        "name": "RecipeName",
        "instructions": "RecipeInstructions",
        "author_id": "UUIDId",
        "meal_id": "UUIDId",
        "ingredients": "RecipeIngredients",
        "description": "RecipeDescription",
        "utensils": "RecipeUtensils",
        "total_time": "RecipeTotalTime",
        "notes": "RecipeNotes",
        "tags": "RecipeTags",
        "privacy": "RecipePrivacy",
        "nutri_facts": "RecipeNutriFacts",
        "weight_in_grams": "RecipeWeightInGrams",
        "image_url": "RecipeImageUrl"
      },
      "methods": [
        {
          "name": "validate_ingredients",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "list[ApiIngredient]",
          "decorators": [
            "field_validator('ingredients')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "validate_tags",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "frozenset[ApiTag]",
          "decorators": [
            "field_validator('tags')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "CreateRecipe",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_recipe",
          "args": [
            "cls",
            "recipe"
          ],
          "return_type": "'ApiCreateRecipe'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to add a new recipe via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        name (str): Name of the recipe.\n        description (str): Detailed description of the recipe.\n        ingredients (list[ApiIngredient], optional): Detailed list of\n            ingredients.\n        instructions (str):Detailed instructions.\n        author_id (str): The recipe's author id.\n        utensils (str, optional): Comma-separated list of utensils.\n        total_time (int, optional): Total preparation and cooking time in\n            minutes.\n        notes (str, optional): Additional notes about the recipe.\n        tags (frozenset[ApiTag], optional): Detailed frozenset of tags.\n        privacy (Privacy): Privacy setting of the recipe.\n        nutri_facts (ApiNutriFacts, optional): Nutritional facts of the\n            recipe.\n        image_url (str, optional): URL of an image of the recipe.\n\n    Methods:\n        to_domain() -> CreateRecipe:\n            Converts the instance to a domain model object for adding a recipe.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [
        "field_validator(ingredients) -> validate_ingredients",
        "field_validator(tags) -> validate_tags"
      ],
      "computed_properties": []
    },
    {
      "name": "ApiDeleteMeal",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/delete_meal.py",
      "line_number": 7,
      "base_classes": [
        "BaseCommand[DeleteMeal, SaBase]"
      ],
      "fields": {
        "meal_id": "UUIDId"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "DeleteMeal",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to delete a meal via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        meal_id (str): ID of the meal to delete.\n\n    Methods:\n        to_domain() -> DeleteMeal:\n            Converts the instance to a domain model object for deleting a meal.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiDeleteRecipe",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/delete_recipe.py",
      "line_number": 7,
      "base_classes": [
        "BaseCommand[DeleteRecipe, SaBase]"
      ],
      "fields": {
        "recipe_id": "UUIDId"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "DeleteRecipe",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to delete a recipe via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        recipe_id (str): ID of the recipe to delete.\n\n    Methods:\n        to_domain() -> DeleteRecipe:\n            Converts the instance to a domain model object for deleting a recipe.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiRateRecipe",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/rate_recipe.py",
      "line_number": 9,
      "base_classes": [
        "BaseCommand[RateRecipe, SaBase]"
      ],
      "fields": {
        "rating": "ApiRating"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "RateRecipe",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to rate a recipe via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        rating (Rating): Rating to add.\n\n    Methods:\n        to_domain() -> RateRecipe:\n            Converts the instance to a domain model object for rating a recipe.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiAttributesToUpdateOnMeal",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/update_meal.py",
      "line_number": 13,
      "base_classes": [
        "BaseCommand[UpdateMeal, SaBase]"
      ],
      "fields": {
        "name": "MealName | None",
        "menu_id": "UUIDIdOptional",
        "description": "MealDescription",
        "recipes": "MealRecipes",
        "tags": "MealTags",
        "notes": "MealNotes",
        "like": "MealLike",
        "image_url": "MealImageUrl"
      },
      "methods": [
        {
          "name": "validate_recipes",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "list[ApiRecipe]",
          "decorators": [
            "field_validator('recipes')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "validate_tags",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "frozenset[ApiTag]",
          "decorators": [
            "field_validator('tags')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A pydantic model representing and validating the data required to update\n    a meal via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        name (str, optional): Name of the meal.\n        menu_id (str, optional): ID of the menu to move the meal to.\n        description (str, optional): Description of the meal.\n        recipes (list[ApiRecipe], optional): Recipes in the meal.\n        tags (frozenset[ApiTag], optional): Tags associated with the meal.\n        notes (str, optional): Additional notes about the meal.\n        like (bool, optional): Whether the meal is liked.\n        image_url (str, optional): URL of an image of the meal.\n\n    Methods:\n        to_domain() -> dict:\n            Converts the instance to a dictionary of attributes to update.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [
        "field_validator(recipes) -> validate_recipes",
        "field_validator(tags) -> validate_tags"
      ],
      "computed_properties": []
    },
    {
      "name": "ApiUpdateMeal",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/update_meal.py",
      "line_number": 73,
      "base_classes": [
        "BaseCommand[UpdateMeal, SaBase]"
      ],
      "fields": {
        "meal_id": "UUIDId",
        "updates": "ApiAttributesToUpdateOnMeal"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "UpdateMeal",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_api_meal",
          "args": [
            "cls",
            "api_meal"
          ],
          "return_type": "'ApiUpdateMeal'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to update a meal via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        meal_id (str): ID of the meal to update.\n        updates (ApiAttributesToUpdateOnMeal): Attributes to update.\n\n    Methods:\n        to_domain() -> UpdateMeal:\n            Converts the instance to a domain model object for updating a meal.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiAttributesToUpdateOnRecipe",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/update_recipe.py",
      "line_number": 14,
      "base_classes": [
        "BaseCommand[UpdateRecipe, SaBase]"
      ],
      "fields": {
        "name": "RecipeName | None",
        "description": "RecipeDescription",
        "ingredients": "RecipeIngredients",
        "instructions": "RecipeInstructions | None",
        "weight_in_grams": "RecipeWeightInGrams",
        "utensils": "RecipeUtensils",
        "total_time": "RecipeTotalTime",
        "notes": "RecipeNotes",
        "tags": "OptionalRecipeTags",
        "privacy": "RecipePrivacy | None",
        "nutri_facts": "RecipeNutriFacts",
        "image_url": "RecipeImageUrl"
      },
      "methods": [
        {
          "name": "validate_ingredients",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "list[ApiIngredient]",
          "decorators": [
            "field_validator('ingredients')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "validate_tags",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "frozenset[ApiTag]",
          "decorators": [
            "field_validator('tags')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A pydantic model representing and validating the data required to update\n    a recipe via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        name (str, optional): Name of the recipe.\n        description (str, optional): Detailed description of the recipe.\n        ingredients (str): (list[ApiIngredient], optional): Detailed list of\n            ingredients.\n        instructions (str): Detailed instructions.\n        utensils (str, optional): Comma-separated list of utensils.\n        total_time (int, optional): Total preparation and cooking time in\n            minutes.\n        notes (str, optional): Additional notes about the recipe.\n        tags (str, optional): for tagging a recipe.\n        privacy (Privacy, optional): Privacy setting of the recipe.\n        nutri_facts (ApiNutriFacts, optional): Nutritional facts of the\n            recipe.\n        image_url (str, optional): URL of an image of the recipe.\n\n    Methods:\n        to_domain() -> dict:\n            Converts the instance to a dictionary of attributes to update.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [
        "field_validator(ingredients) -> validate_ingredients",
        "field_validator(tags) -> validate_tags"
      ],
      "computed_properties": []
    },
    {
      "name": "ApiUpdateRecipe",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/commands/update_recipe.py",
      "line_number": 84,
      "base_classes": [
        "BaseCommand[UpdateRecipe, SaBase]"
      ],
      "fields": {
        "recipe_id": "UUIDId",
        "updates": "ApiAttributesToUpdateOnRecipe"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "UpdateRecipe",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_api_recipe",
          "args": [
            "cls",
            "api_recipe"
          ],
          "return_type": "'ApiUpdateRecipe'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to update a recipe via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        recipe_id (str): Identifier of the recipe to update.\n        updates (ApiAttributesToUpdateOnRecipe): Attributes to update.\n\n    Methods:\n        to_domain() -> UpdateRecipe:\n            Converts the instance to a domain model object for updating a recipe.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiRecipe",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/entities/api_recipe.py",
      "line_number": 20,
      "base_classes": [
        "BaseEntity[_Recipe, RecipeSaModel]"
      ],
      "fields": {
        "id": "UUIDId",
        "name": "RecipeName",
        "instructions": "RecipeInstructions",
        "author_id": "UUIDId",
        "meal_id": "UUIDId",
        "ingredients": "RecipeIngredients",
        "description": "RecipeDescription",
        "utensils": "RecipeUtensils",
        "total_time": "RecipeTotalTime",
        "notes": "RecipeNotes",
        "tags": "RecipeTags",
        "privacy": "RecipePrivacy",
        "ratings": "RecipeRatings",
        "nutri_facts": "RecipeNutriFacts",
        "weight_in_grams": "RecipeWeightInGrams",
        "image_url": "RecipeImageUrl",
        "average_taste_rating": "RecipeAverageTasteRating",
        "average_convenience_rating": "RecipeAverageConvenienceRating"
      },
      "methods": [
        {
          "name": "validate_ingredients",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "list[ApiIngredient]",
          "decorators": [
            "field_validator('ingredients')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "validate_tags",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "frozenset[ApiTag]",
          "decorators": [
            "field_validator('tags')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "validate_ratings",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "list[ApiRating]",
          "decorators": [
            "field_validator('ratings')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiRecipe'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "_Recipe",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "'ApiRecipe'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating a recipe encompassing\n    details about the recipe, its ingredients, preparation, and\n    additional metadata.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        id (str): Unique identifier of the recipe.\n        name (str): Name of the recipe.\n        description (str): Detailed description.\n        ingredients (list[ApiIngredient], optional): Detailed list of\n            ingredients.\n        instructions (str): Detailed instructions.\n        author_id (str): Identifier of the recipe's author.\n        utensils (str, optional): Comma-separated list of utensils.\n        notes (str, optional): Additional notes.\n        ... (additional common attributes for recipe details) ...\n        nutri_facts (ApiNutriFacts, optional): Nutritional facts of the recipe.\n        ratings (list[ApiRating]): User ratings of the recipe.\n        ... (other metadata attributes) ...\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model or\n            if it this class cannot be instantiated from a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [
        "field_validator(ingredients) -> validate_ingredients",
        "field_validator(tags) -> validate_tags",
        "field_validator(ratings) -> validate_ratings"
      ],
      "computed_properties": []
    },
    {
      "name": "ApiRecipeFilter",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/entities/api_recipe_filter.py",
      "line_number": 13,
      "base_classes": [
        "BaseApiModel[Any, Any]"
      ],
      "fields": {
        "id": "str | list[str] | None",
        "name": "str | None",
        "author_id": "str | list[str] | None",
        "meal_id": "str | list[str] | None",
        "total_time_gte": "int | None",
        "total_time_lte": "int | None",
        "products": "str | list[str] | None",
        "tags": "str | None",
        "tags_not_exists": "str | None",
        "privacy": "Privacy | list[Privacy] | None",
        "calories_gte": "float | None",
        "calories_lte": "float | None",
        "protein_gte": "float | None",
        "protein_lte": "float | None",
        "carbohydrate_gte": "float | None",
        "carbohydrate_lte": "float | None",
        "total_fat_gte": "float | None",
        "total_fat_lte": "float | None",
        "saturated_fat_gte": "float | None",
        "saturated_fat_lte": "float | None",
        "trans_fat_gte": "float | None",
        "trans_fat_lte": "float | None",
        "sugar_gte": "float | None",
        "sugar_lte": "float | None",
        "sodium_gte": "float | None",
        "sodium_lte": "float | None",
        "calorie_density_gte": "float | None",
        "calorie_density_lte": "float | None",
        "carbo_percentage_gte": "float | None",
        "carbo_percentage_lte": "float | None",
        "protein_percentage_gte": "float | None",
        "protein_percentage_lte": "float | None",
        "total_fat_percentage_gte": "float | None",
        "total_fat_percentage_lte": "float | None",
        "weight_in_grams_gte": "int | None",
        "weight_in_grams_lte": "int | None",
        "created_at_gte": "CreatedAtValue | None",
        "created_at_lte": "CreatedAtValue | None",
        "average_taste_rating_gte": "AverageRatingValue | None",
        "average_convenience_rating_gte": "AverageRatingValue | None",
        "skip": "int | None",
        "limit": "int | None",
        "sort": "str | None"
      },
      "methods": [
        {
          "name": "model_dump",
          "args": [
            "self"
          ],
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "filter_must_be_allowed_by_repo",
          "args": [
            "cls",
            "values"
          ],
          "return_type": "Dict[str, Any]",
          "decorators": [
            "model_validator(mode='before')",
            "classmethod"
          ],
          "is_classmethod": true
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating recipe filter parameters.\n    \n    This model is used for input validation and serialization of filter\n    parameters in API requests.\n\n    Attributes:\n        id (str | list[str] | None): Filter by recipe ID(s)\n        name (str | None): Filter by recipe name\n        author_id (str | list[str] | None): Filter by author ID(s)\n        meal_id (str | list[str] | None): Filter by meal ID(s)\n        total_time_gte (int | None): Filter by minimum total time\n        total_time_lte (int | None): Filter by maximum total time\n        products (str | list[str] | None): Filter by product ID(s)\n        tags (str | None): Filter by tags (comma-separated or pipe-separated)\n        tags_not_exists (str | None): Filter by non-existent tags\n        privacy (Privacy | list[Privacy] | None): Filter by privacy setting(s)\n        calories_gte (float | None): Filter by minimum calories\n        calories_lte (float | None): Filter by maximum calories\n        protein_gte (float | None): Filter by minimum protein\n        protein_lte (float | None): Filter by maximum protein\n        carbohydrate_gte (float | None): Filter by minimum carbohydrate\n        carbohydrate_lte (float | None): Filter by maximum carbohydrate\n        total_fat_gte (float | None): Filter by minimum total fat\n        total_fat_lte (float | None): Filter by maximum total fat\n        saturated_fat_gte (float | None): Filter by minimum saturated fat\n        saturated_fat_lte (float | None): Filter by maximum saturated fat\n        trans_fat_gte (float | None): Filter by minimum trans fat\n        trans_fat_lte (float | None): Filter by maximum trans fat\n        sugar_gte (float | None): Filter by minimum sugar\n        sugar_lte (float | None): Filter by maximum sugar\n        sodium_gte (float | None): Filter by minimum sodium\n        sodium_lte (float | None): Filter by maximum sodium\n        calorie_density_gte (float | None): Filter by minimum calorie density\n        calorie_density_lte (float | None): Filter by maximum calorie density\n        carbo_percentage_gte (float | None): Filter by minimum carbohydrate percentage\n        carbo_percentage_lte (float | None): Filter by maximum carbohydrate percentage\n        protein_percentage_gte (float | None): Filter by minimum protein percentage\n        protein_percentage_lte (float | None): Filter by maximum protein percentage\n        total_fat_percentage_gte (float | None): Filter by minimum total fat percentage\n        total_fat_percentage_lte (float | None): Filter by maximum total fat percentage\n        weight_in_grams_gte (int | None): Filter by minimum weight\n        weight_in_grams_lte (int | None): Filter by maximum weight\n        created_at_gte (CreatedAtValue): Filter by minimum creation date\n        created_at_lte (CreatedAtValue): Filter by maximum creation date\n        average_taste_rating_gte (AverageRatingValue): Filter by minimum taste rating\n        average_convenience_rating_gte (AverageRatingValue): Filter by minimum convenience rating\n        skip (int | None): Number of records to skip\n        limit (int | None): Maximum number of records to return\n        sort (str | None): Sort field and direction\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiMeal",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/root_aggregate/api_meal.py",
      "line_number": 16,
      "base_classes": [
        "BaseEntity[Meal, MealSaModel]"
      ],
      "fields": {
        "id": "UUIDId",
        "name": "MealName",
        "author_id": "UUIDId",
        "menu_id": "UUIDIdOptional",
        "recipes": "MealRecipes",
        "tags": "MealTags",
        "description": "MealDescription",
        "notes": "MealNotes",
        "like": "MealLike",
        "image_url": "MealImageUrl",
        "nutri_facts": "MealNutriFacts",
        "weight_in_grams": "MealWeightInGrams",
        "calorie_density": "MealCalorieDensity",
        "carbo_percentage": "MealCarboPercentage",
        "protein_percentage": "MealProteinPercentage",
        "total_fat_percentage": "MealTotalFatPercentage"
      },
      "methods": [
        {
          "name": "validate_recipes",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "list[ApiRecipe]",
          "decorators": [
            "field_validator('recipes')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "validate_tags",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "frozenset[ApiTag]",
          "decorators": [
            "field_validator('tags')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiMeal'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "Meal",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "'ApiMeal'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating a meal encompassing\n    details about the meal, its recipes, and additional metadata.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        id (str): Unique identifier of the meal.\n        name (str): Name of the meal.\n        author_id (str): Identifier of the meal's author.\n        menu_id (str, optional): Identifier of the meal's menu.\n        recipes (list[ApiRecipe], optional): Recipes in the meal.\n        tags (set[ApiTag], optional): Tags associated with the meal.\n        description (str, optional): Detailed description.\n        notes (str, optional): Additional notes.\n        like (bool, optional): Whether the meal is liked.\n        image_url (str, optional): URL of an image.\n        nutri_facts (ApiNutriFacts, optional): Nutritional facts.\n        weight_in_grams (int, optional): Weight in grams.\n        calorie_density (float, optional): Calorie density.\n        carbo_percentage (float, optional): Percentage of carbohydrates.\n        protein_percentage (float, optional): Percentage of proteins.\n        total_fat_percentage (float, optional): Percentage of total fat.\n    ",
      "validation_patterns": [
        "field_validator(recipes) -> validate_recipes",
        "field_validator(tags) -> validate_tags"
      ],
      "computed_properties": []
    },
    {
      "name": "ApiMealFilter",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/root_aggregate/api_meal_filter.py",
      "line_number": 10,
      "base_classes": [
        "BaseModel"
      ],
      "fields": {
        "id": "str | list[str] | None",
        "name": "str | None",
        "author_id": "str | list[str] | None",
        "menu_id": "str | list[str] | None",
        "total_time_gte": "int | None",
        "total_time_lte": "int | None",
        "products": "str | list[str] | None",
        "tags": "str | None",
        "tags_not_exists": "str | None",
        "privacy": "Privacy | list[Privacy] | None",
        "calories_gte": "int | None",
        "calories_lte": "int | None",
        "protein_gte": "int | None",
        "protein_lte": "int | None",
        "carbohydrate_gte": "int | None",
        "carbohydrate_lte": "int | None",
        "total_fat_gte": "int | None",
        "total_fat_lte": "int | None",
        "saturated_fat_gte": "int | None",
        "saturated_fat_lte": "int | None",
        "trans_fat_gte": "int | None",
        "trans_fat_lte": "int | None",
        "sugar_gte": "int | None",
        "sugar_lte": "int | None",
        "sodium_gte": "int | None",
        "sodium_lte": "int | None",
        "calorie_density_gte": "int | None",
        "calorie_density_lte": "int | None",
        "carbo_percentage_gte": "int | None",
        "carbo_percentage_lte": "int | None",
        "protein_percentage_gte": "int | None",
        "protein_percentage_lte": "int | None",
        "total_fat_percentage_gte": "int | None",
        "total_fat_percentage_lte": "int | None",
        "weight_in_grams_gte": "int | None",
        "weight_in_grams_lte": "int | None",
        "created_at_gte": "CreatedAtValue | None",
        "created_at_lte": "CreatedAtValue | None",
        "like": "bool | None",
        "skip": "int | None",
        "limit": "int | None",
        "sort": "str | None"
      },
      "methods": [
        {
          "name": "model_dump",
          "args": [
            "self"
          ],
          "return_type": null,
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "filter_must_be_allowed_by_repo",
          "args": [
            "cls",
            "values"
          ],
          "return_type": null,
          "decorators": [
            "model_validator(mode='before')",
            "classmethod"
          ],
          "is_classmethod": true
        }
      ],
      "docstring": null,
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiIngredient",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/value_objetcs/api_ingredient.py",
      "line_number": 12,
      "base_classes": [
        "BaseValueObject[Ingredient, IngredientSaModel]"
      ],
      "fields": {
        "name": "IngredientName",
        "quantity": "IngredientQuantity",
        "unit": "MeasureUnit",
        "position": "IngredientPosition",
        "full_text": "IngredientFullText",
        "product_id": "UUIDIdOptional"
      },
      "methods": [
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiIngredient'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "Ingredient",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "'ApiIngredient'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating a recipe ingredient.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        name (str): The name of the ingredient.\n        quantity (float): The quantity of the ingredient.\n        position (int): The position of the ingredient in the recipe.\n        unit (MeasureUnit): The unit of measurement for the quantity of the ingredient.\n        full_text (str, optional): The full textual description of the ingredient, if available.\n        product_id (str, optional): The identifier of the food item associated with the ingredient, if applicable.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiRating",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/meal/api_schemas/value_objetcs/api_rating.py",
      "line_number": 12,
      "base_classes": [
        "BaseValueObject[Rating, RatingSaModel]"
      ],
      "fields": {
        "user_id": "UUIDId",
        "recipe_id": "UUIDId",
        "taste": "RatingTaste",
        "convenience": "RatingConvenience",
        "comment": "RatingComment"
      },
      "methods": [
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiRating'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "Rating",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "'ApiRating'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating user's ratings for a recipe.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        user_id (str): Unique identifier of the user who provided the rating.\n        recipe_id (str): Unique identifier of the recipe being rated.\n        taste (RatingTaste): Rating value for the taste of the recipe.\n        convenience (RatingConvenience): Rating value for the convenience of\n            preparing the recipe.\n        comment (RatingComment): Comment about the recipe.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiCreateTag",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/shared/api_schemas/commands/tag/create.py",
      "line_number": 12,
      "base_classes": [
        "BaseCommand[CreateTag, SaBase]"
      ],
      "fields": {
        "value": "TagValue",
        "author_id": "UUIDId",
        "key": "TagKey",
        "type": "TagType"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "CreateTag",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to add a new tag via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        value (str): Value of the tag.\n        author_id (str): ID of the user adding the tag.\n        key (str): Key of the tag.\n        type (str): Type of the tag (e.g. 'recipe', 'meal'...).\n\n    Methods:\n        to_domain() -> CreateTag:\n            Converts the instance to a domain model object for creating a tag.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiDeleteTag",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/shared/api_schemas/commands/tag/delete.py",
      "line_number": 8,
      "base_classes": [
        "BaseCommand[DeleteTag, SaBase]"
      ],
      "fields": {
        "id": "UUIDId"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "DeleteTag",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the data required\n    to delete a tag via the API.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        id (str): ID of the tag to delete.\n\n    Methods:\n        to_domain() -> DeleteTag:\n            Converts the instance to a domain model object for deleting a tag.\n\n    Raises:\n        ValueError: If the instance cannot be converted to a domain model.\n        ValidationError: If the instance is invalid.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiRole",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/shared/api_schemas/value_objects/api_role.py",
      "line_number": 3,
      "base_classes": [
        "ApiSeedRole"
      ],
      "fields": {},
      "methods": [],
      "docstring": "\n    Recipes Catalog API schema for Role. Inherits from ApiSeedRole.\n    Extend here if recipes_catalog needs custom fields or validation.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiUser",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/recipes_catalog/core/adapters/shared/api_schemas/value_objects/api_user.py",
      "line_number": 13,
      "base_classes": [
        "ApiSeedUser"
      ],
      "fields": {
        "id": "UUIDId",
        "roles": "set[ApiRole]"
      },
      "methods": [
        {
          "name": "validate_roles",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "set[ApiRole]",
          "decorators": [
            "field_validator('roles')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "User",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiUser'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "'ApiUser'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating a user in the recipes catalog context.\n\n    This model inherits from ApiSeedUser and overrides the domain type to use the\n    recipes catalog specific User value object.\n    ",
      "validation_patterns": [
        "field_validator(roles) -> validate_roles"
      ],
      "computed_properties": []
    },
    {
      "name": "BaseApiModel",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/seedwork/shared/adapters/api_schemas/base_api_model.py",
      "line_number": 22,
      "base_classes": [
        "BaseModel",
        "Generic[D, S]"
      ],
      "fields": {},
      "methods": [
        {
          "name": "serialize_sets_to_lists",
          "args": [
            "self",
            "value"
          ],
          "return_type": "Any",
          "decorators": [
            "field_serializer('*', when_used='json')"
          ],
          "is_classmethod": false
        },
        {
          "name": "_safe_to_domain",
          "args": [
            "self"
          ],
          "return_type": "D",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "_safe_from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "Self",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "_safe_to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "_safe_from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "Self",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "Self",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "D",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "Self",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "Base class for all API schemas with shared configuration and utilities.",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "BaseValueObject",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/seedwork/shared/adapters/api_schemas/base_api_model.py",
      "line_number": 285,
      "base_classes": [
        "BaseApiModel[V, S]"
      ],
      "fields": {},
      "methods": [],
      "docstring": "Base class for value objects.",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "BaseEntity",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/seedwork/shared/adapters/api_schemas/base_api_model.py",
      "line_number": 296,
      "base_classes": [
        "BaseApiModel[E, S]"
      ],
      "fields": {
        "id": "UUIDId",
        "created_at": "CreatedAtValue | None",
        "updated_at": "CreatedAtValue | None",
        "version": "Annotated[int, Field(default=1)]",
        "discarded": "Annotated[bool, Field(default=False)]"
      },
      "methods": [],
      "docstring": "Base class for entity schemas with common fields.",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "BaseCommand",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/seedwork/shared/adapters/api_schemas/base_api_model.py",
      "line_number": 306,
      "base_classes": [
        "BaseApiModel[C, S]"
      ],
      "fields": {},
      "methods": [],
      "docstring": "Base class for command schemas.",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiSeedRole",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/seedwork/shared/adapters/api_schemas/value_objects/role.py",
      "line_number": 8,
      "base_classes": [
        "BaseValueObject[SeedRole, RoleSaModel]"
      ],
      "fields": {
        "name": "str",
        "permissions": "frozenset[str]"
      },
      "methods": [
        {
          "name": "validate_name",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "str",
          "decorators": [
            "field_validator('name')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "validate_permissions",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "frozenset[str]",
          "decorators": [
            "field_validator('permissions', mode='before')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiSeedRole'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "SeedRole",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "'ApiSeedRole'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "Schema for the SeedRole value object.",
      "validation_patterns": [
        "field_validator(name) -> validate_name",
        "field_validator(permissions) -> validate_permissions"
      ],
      "computed_properties": []
    },
    {
      "name": "ApiSeedUser",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/seedwork/shared/adapters/api_schemas/value_objects/user.py",
      "line_number": 10,
      "base_classes": [
        "BaseValueObject[SeedUser, UserSaModel]"
      ],
      "fields": {
        "id": "str",
        "roles": "set[ApiSeedRole]"
      },
      "methods": [
        {
          "name": "validate_id",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "str",
          "decorators": [
            "field_validator('id')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "validate_roles",
          "args": [
            "cls",
            "v"
          ],
          "return_type": "set[ApiSeedRole]",
          "decorators": [
            "field_validator('roles')",
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiSeedUser'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "SeedUser",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "'ApiSeedUser'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "Schema for the SeedUser value object.",
      "validation_patterns": [
        "field_validator(id) -> validate_id",
        "field_validator(roles) -> validate_roles"
      ],
      "computed_properties": []
    },
    {
      "name": "ApiAddress",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/shared_kernel/adapters/api_schemas/value_objects/address.py",
      "line_number": 8,
      "base_classes": [
        "BaseValueObject[Address, SaBase]"
      ],
      "fields": {
        "street": "str | None",
        "number": "str | None",
        "zip_code": "str | None",
        "district": "str | None",
        "city": "str | None",
        "state": "State | None",
        "complement": "str | None",
        "note": "str | None"
      },
      "methods": [
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_address"
          ],
          "return_type": "'ApiAddress'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "Address",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "'ApiAddress'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "dict",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "A class to represent and validate an address.",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiContactInfo",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/shared_kernel/adapters/api_schemas/value_objects/contact_info.py",
      "line_number": 8,
      "base_classes": [
        "BaseValueObject[ContactInfo, SaBase]"
      ],
      "fields": {
        "main_phone": "str | None",
        "main_email": "str | None",
        "all_phones": "set[str]",
        "all_emails": "set[str]"
      },
      "methods": [
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiContactInfo'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "ContactInfo",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "'ApiContactInfo'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "dict",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "A class to represent and validate a contact info.",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiNutriFacts",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/shared_kernel/adapters/api_schemas/value_objects/nutri_facts.py",
      "line_number": 8,
      "base_classes": [
        "BaseValueObject[NutriFacts, SaBase]"
      ],
      "fields": {
        "calories": "float | ApiNutriValue | None",
        "protein": "float | ApiNutriValue | None",
        "carbohydrate": "float | ApiNutriValue | None",
        "total_fat": "float | ApiNutriValue | None",
        "saturated_fat": "float | ApiNutriValue | None",
        "trans_fat": "float | ApiNutriValue | None",
        "dietary_fiber": "float | ApiNutriValue | None",
        "sodium": "float | ApiNutriValue | None",
        "arachidonic_acid": "float | ApiNutriValue | None",
        "ashes": "float | ApiNutriValue | None",
        "dha": "float | ApiNutriValue | None",
        "epa": "float | ApiNutriValue | None",
        "sugar": "float | ApiNutriValue | None",
        "starch": "float | ApiNutriValue | None",
        "biotin": "float | ApiNutriValue | None",
        "boro": "float | ApiNutriValue | None",
        "caffeine": "float | ApiNutriValue | None",
        "calcium": "float | ApiNutriValue | None",
        "chlorine": "float | ApiNutriValue | None",
        "copper": "float | ApiNutriValue | None",
        "cholesterol": "float | ApiNutriValue | None",
        "choline": "float | ApiNutriValue | None",
        "chrome": "float | ApiNutriValue | None",
        "dextrose": "float | ApiNutriValue | None",
        "sulfur": "float | ApiNutriValue | None",
        "phenylalanine": "float | ApiNutriValue | None",
        "iron": "float | ApiNutriValue | None",
        "insoluble_fiber": "float | ApiNutriValue | None",
        "soluble_fiber": "float | ApiNutriValue | None",
        "fluor": "float | ApiNutriValue | None",
        "phosphorus": "float | ApiNutriValue | None",
        "fructo_oligosaccharides": "float | ApiNutriValue | None",
        "fructose": "float | ApiNutriValue | None",
        "galacto_oligosaccharides": "float | ApiNutriValue | None",
        "galactose": "float | ApiNutriValue | None",
        "glucose": "float | ApiNutriValue | None",
        "glucoronolactone": "float | ApiNutriValue | None",
        "monounsaturated_fat": "float | ApiNutriValue | None",
        "polyunsaturated_fat": "float | ApiNutriValue | None",
        "guarana": "float | ApiNutriValue | None",
        "inositol": "float | ApiNutriValue | None",
        "inulin": "float | ApiNutriValue | None",
        "iodine": "float | ApiNutriValue | None",
        "l_carnitine": "float | ApiNutriValue | None",
        "l_methionine": "float | ApiNutriValue | None",
        "lactose": "float | ApiNutriValue | None",
        "magnesium": "float | ApiNutriValue | None",
        "maltose": "float | ApiNutriValue | None",
        "manganese": "float | ApiNutriValue | None",
        "molybdenum": "float | ApiNutriValue | None",
        "linolenic_acid": "float | ApiNutriValue | None",
        "linoleic_acid": "float | ApiNutriValue | None",
        "omega_7": "float | ApiNutriValue | None",
        "omega_9": "float | ApiNutriValue | None",
        "oleic_acid": "float | ApiNutriValue | None",
        "other_carbo": "float | ApiNutriValue | None",
        "polydextrose": "float | ApiNutriValue | None",
        "polyols": "float | ApiNutriValue | None",
        "potassium": "float | ApiNutriValue | None",
        "sacarose": "float | ApiNutriValue | None",
        "selenium": "float | ApiNutriValue | None",
        "silicon": "float | ApiNutriValue | None",
        "sorbitol": "float | ApiNutriValue | None",
        "sucralose": "float | ApiNutriValue | None",
        "taurine": "float | ApiNutriValue | None",
        "vitamin_a": "float | ApiNutriValue | None",
        "vitamin_b1": "float | ApiNutriValue | None",
        "vitamin_b2": "float | ApiNutriValue | None",
        "vitamin_b3": "float | ApiNutriValue | None",
        "vitamin_b5": "float | ApiNutriValue | None",
        "vitamin_b6": "float | ApiNutriValue | None",
        "folic_acid": "float | ApiNutriValue | None",
        "vitamin_b12": "float | ApiNutriValue | None",
        "vitamin_c": "float | ApiNutriValue | None",
        "vitamin_d": "float | ApiNutriValue | None",
        "vitamin_e": "float | ApiNutriValue | None",
        "vitamin_k": "float | ApiNutriValue | None",
        "zinc": "float | ApiNutriValue | None",
        "retinol": "float | ApiNutriValue | None",
        "thiamine": "float | ApiNutriValue | None",
        "riboflavin": "float | ApiNutriValue | None",
        "pyridoxine": "float | ApiNutriValue | None",
        "niacin": "float | ApiNutriValue | None"
      },
      "methods": [
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiNutriFacts'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "NutriFacts",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "dict",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the nutritional facts\n    of a food item.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Each nutrient is represented by an ApiNutriValue instance that contains\n    both the value and the appropriate unit for that nutrient.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiNutriValue",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/shared_kernel/adapters/api_schemas/value_objects/nutri_value.py",
      "line_number": 8,
      "base_classes": [
        "BaseValueObject[NutriValue, SaBase]"
      ],
      "fields": {
        "unit": "MeasureUnit | None",
        "value": "MyNullableNonNegativeFloat | None"
      },
      "methods": [
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiNutriValue'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "NutriValue",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "dict",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating the nutritional value\n    of a food item.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes\n        unit (Unit): The unit of measurement for the nutritional value.\n            This is an instance of the `Unit` Enum class defined in the\n            codebase.\n        value (MyNullableNonNegativeFloat): The nutritional value, which must be a\n            non-negative float or None. Defaults to None.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiProfile",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/shared_kernel/adapters/api_schemas/value_objects/profile.py",
      "line_number": 8,
      "base_classes": [
        "BaseValueObject[Profile, SaBase]"
      ],
      "fields": {
        "name": "str | None",
        "birthday": "date | None",
        "sex": "str | None"
      },
      "methods": [
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiProfile'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "Profile",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "'ApiProfile'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "dict",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "A class to represent and validate a profile.",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiTag",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/shared_kernel/adapters/api_schemas/value_objects/tag/tag.py",
      "line_number": 7,
      "base_classes": [
        "BaseValueObject[Tag, TagSaModel]"
      ],
      "fields": {
        "key": "str",
        "value": "str",
        "author_id": "str",
        "type": "str"
      },
      "methods": [
        {
          "name": "from_domain",
          "args": [
            "cls",
            "domain_obj"
          ],
          "return_type": "'ApiTag'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "Tag",
          "decorators": [],
          "is_classmethod": false
        },
        {
          "name": "from_orm_model",
          "args": [
            "cls",
            "orm_model"
          ],
          "return_type": "'ApiTag'",
          "decorators": [
            "classmethod"
          ],
          "is_classmethod": true
        },
        {
          "name": "to_orm_kwargs",
          "args": [
            "self"
          ],
          "return_type": "dict",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "A class to represent and validate a tag.",
      "validation_patterns": [],
      "computed_properties": []
    },
    {
      "name": "ApiTagFilter",
      "file_path": "/home/jap/projects/menu-planning/backend/services/app/src/contexts/shared_kernel/adapters/api_schemas/value_objects/tag/tag_filter.py",
      "line_number": 4,
      "base_classes": [
        "BaseModel"
      ],
      "fields": {
        "key": "str | list[str] | None",
        "value": "str | list[str] | None",
        "author_id": "str | list[str] | None",
        "type": "str | list[str] | None",
        "skip": "int | None",
        "limit": "int | None",
        "sort": "str | None"
      },
      "methods": [
        {
          "name": "to_domain",
          "args": [
            "self"
          ],
          "return_type": "dict",
          "decorators": [],
          "is_classmethod": false
        }
      ],
      "docstring": "\n    A Pydantic model representing and validating a filter for tags.\n\n    This model is used for input validation and serialization of domain\n    objects in API requests and responses.\n\n    Attributes:\n        key (str, optional): Key of the tag.\n        value (str, optional): Value of the tag.\n        author_id (str, optional): ID of the author of the tag.\n        skip (int, optional): Number of tags to skip.\n        limit (int, optional): Maximum number of tags to return.\n        sort (str, optional): Sort order for the tags.\n\n    Methods:\n        to_domain() -> dict:\n            Converts the instance to a dictionary for use in a domain model object.\n    ",
      "validation_patterns": [],
      "computed_properties": []
    }
  ]
}
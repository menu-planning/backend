"""delete products table from schema food_tracker

Revision ID: b24ff827f595
Revises: 1403b10e98e5
Create Date: 2024-04-09 10:50:59.771162

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "b24ff827f595"
down_revision = "1403b10e98e5"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(
        op.f("ix_food_tracker_houses_owner_id"),
        "houses",
        ["owner_id"],
        unique=False,
        schema="food_tracker",
    )
    op.drop_constraint(
        "fk_houses_owner_id_owners", "houses", schema="food_tracker", type_="foreignkey"
    )
    op.add_column(
        "houses_members_association",
        sa.Column("user_id", sa.String(), nullable=False),
        schema="food_tracker",
    )
    op.drop_constraint(
        "fk_houses_members_association_member_id_members",
        "houses_members_association",
        schema="food_tracker",
        type_="foreignkey",
    )
    op.drop_column("houses_members_association", "member_id", schema="food_tracker")
    op.add_column(
        "houses_nutritionists_association",
        sa.Column("user_id", sa.String(), nullable=False),
        schema="food_tracker",
    )
    op.drop_constraint(
        "fk_houses_nutritionists_association_nutritionist_id_nut_5cb3",
        "houses_nutritionists_association",
        schema="food_tracker",
        type_="foreignkey",
    )
    op.drop_column(
        "houses_nutritionists_association", "nutritionist_id", schema="food_tracker"
    )
    op.add_column(
        "items",
        sa.Column(
            "ids_of_products_with_similar_names",
            postgresql.ARRAY(sa.String()),
            nullable=False,
        ),
        schema="food_tracker",
    )
    op.drop_constraint(
        "fk_items_product_id_products",
        "items",
        schema="food_tracker",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("fk_items_product_id_products"),
        "items",
        "products",
        ["product_id"],
        ["id"],
        source_schema="food_tracker",
        referent_schema="products_catalog",
    )
    op.drop_column("items", "top_similar_names", schema="food_tracker")
    # ### end Alembic commands ###
    op.drop_table("products_diet_types_association", schema="food_tracker")
    op.drop_index(
        "ix_food_tracker_products_preprocessed_name_gin_trgm",
        table_name="products",
        schema="food_tracker",
        postgresql_ops={"preprocessed_name": "gin_trgm_ops"},
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("ix_food_tracker_products_preprocessed_name"),
        table_name="products",
        schema="food_tracker",
    )
    op.drop_index(
        op.f("ix_food_tracker_products_parent_category"),
        table_name="products",
        schema="food_tracker",
    )
    op.drop_index(
        op.f("ix_food_tracker_products_name"),
        table_name="products",
        schema="food_tracker",
    )
    op.drop_index(
        op.f("ix_food_tracker_products_category"),
        table_name="products",
        schema="food_tracker",
    )
    op.drop_index(
        op.f("ix_food_tracker_products_brand"),
        table_name="products",
        schema="food_tracker",
    )
    op.drop_index(
        op.f("ix_food_tracker_products_barcode"),
        table_name="products",
        schema="food_tracker",
    )
    op.drop_table("products", schema="food_tracker")
    op.drop_table("owners", schema="food_tracker")
    op.drop_table("nutritionists", schema="food_tracker")
    op.drop_table("members", schema="food_tracker")
    op.drop_table("diet_types", schema="food_tracker")


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "diet_types",
        sa.Column("id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_diet_types")),
        schema="food_tracker",
    )
    op.create_table(
        "members",
        sa.Column("id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_members")),
        schema="food_tracker",
    )
    op.create_table(
        "nutritionists",
        sa.Column("id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_nutritionists")),
        schema="food_tracker",
    )
    op.create_table(
        "owners",
        sa.Column("id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_owners")),
        schema="food_tracker",
    )
    op.create_table(
        "products",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("preprocessed_name", sa.String(), nullable=True),
        sa.Column("brand", sa.String(), nullable=True),
        sa.Column("is_food", sa.Boolean(), nullable=True),
        sa.Column("category", sa.String(), nullable=True),
        sa.Column("parent_category", sa.String(), nullable=True),
        sa.Column("food_group", sa.String(), nullable=True),
        sa.Column("process_type", sa.String(), nullable=True),
        sa.Column("final_score", sa.Float(), nullable=True),
        sa.Column("ingredients_score", sa.Float(), nullable=True),
        sa.Column("nutrients_score", sa.Float(), nullable=True),
        sa.Column("barcode", sa.String(), nullable=True),
        sa.Column("ingredients", sa.TEXT(), nullable=True),
        sa.Column("package_size", sa.Float(), nullable=True),
        sa.Column("package_size_unit", sa.String(), nullable=True),
        sa.Column("image_url", sa.String(), nullable=True),
        sa.Column("calories", sa.Float(), nullable=True),
        sa.Column("protein", sa.Float(), nullable=True),
        sa.Column("carbohydrate", sa.Float(), nullable=True),
        sa.Column("total_fat", sa.Float(), nullable=True),
        sa.Column("saturated_fat", sa.Float(), nullable=True),
        sa.Column("trans_fat", sa.Float(), nullable=True),
        sa.Column("dietary_fiber", sa.Float(), nullable=True),
        sa.Column("sodium", sa.Float(), nullable=True),
        sa.Column("arachidonic_acid", sa.Float(), nullable=True),
        sa.Column("ashes", sa.Float(), nullable=True),
        sa.Column("dha", sa.Float(), nullable=True),
        sa.Column("epa", sa.Float(), nullable=True),
        sa.Column("sugar", sa.Float(), nullable=True),
        sa.Column("starch", sa.Float(), nullable=True),
        sa.Column("biotin", sa.Float(), nullable=True),
        sa.Column("boro", sa.Float(), nullable=True),
        sa.Column("caffeine", sa.Float(), nullable=True),
        sa.Column("calcium", sa.Float(), nullable=True),
        sa.Column("chlorine", sa.Float(), nullable=True),
        sa.Column("copper", sa.Float(), nullable=True),
        sa.Column("cholesterol", sa.Float(), nullable=True),
        sa.Column("choline", sa.Float(), nullable=True),
        sa.Column("chrome", sa.Float(), nullable=True),
        sa.Column("dextrose", sa.Float(), nullable=True),
        sa.Column("sulfur", sa.Float(), nullable=True),
        sa.Column("phenylalanine", sa.Float(), nullable=True),
        sa.Column("iron", sa.Float(), nullable=True),
        sa.Column("insoluble_fiber", sa.Float(), nullable=True),
        sa.Column("soluble_fiber", sa.Float(), nullable=True),
        sa.Column("fluor", sa.Float(), nullable=True),
        sa.Column("phosphorus", sa.Float(), nullable=True),
        sa.Column("fructo_oligosaccharides", sa.Float(), nullable=True),
        sa.Column("fructose", sa.Float(), nullable=True),
        sa.Column("galacto_oligosaccharides", sa.Float(), nullable=True),
        sa.Column("galactose", sa.Float(), nullable=True),
        sa.Column("glucose", sa.Float(), nullable=True),
        sa.Column("glucoronolactone", sa.Float(), nullable=True),
        sa.Column("monounsaturated_fat", sa.Float(), nullable=True),
        sa.Column("polyunsaturated_fat", sa.Float(), nullable=True),
        sa.Column("guarana", sa.Float(), nullable=True),
        sa.Column("inositol", sa.Float(), nullable=True),
        sa.Column("inulin", sa.Float(), nullable=True),
        sa.Column("iodine", sa.Float(), nullable=True),
        sa.Column("l_carnitine", sa.Float(), nullable=True),
        sa.Column("l_methionine", sa.Float(), nullable=True),
        sa.Column("lactose", sa.Float(), nullable=True),
        sa.Column("magnesium", sa.Float(), nullable=True),
        sa.Column("maltose", sa.Float(), nullable=True),
        sa.Column("manganese", sa.Float(), nullable=True),
        sa.Column("molybdenum", sa.Float(), nullable=True),
        sa.Column("linolenic_acid", sa.Float(), nullable=True),
        sa.Column("linoleic_acid", sa.Float(), nullable=True),
        sa.Column("omega_7", sa.Float(), nullable=True),
        sa.Column("omega_9", sa.Float(), nullable=True),
        sa.Column("oleic_acid", sa.Float(), nullable=True),
        sa.Column("other_carbo", sa.Float(), nullable=True),
        sa.Column("polydextrose", sa.Float(), nullable=True),
        sa.Column("polyols", sa.Float(), nullable=True),
        sa.Column("potassium", sa.Float(), nullable=True),
        sa.Column("sacarose", sa.Float(), nullable=True),
        sa.Column("selenium", sa.Float(), nullable=True),
        sa.Column("silicon", sa.Float(), nullable=True),
        sa.Column("sorbitol", sa.Float(), nullable=True),
        sa.Column("sucralose", sa.Float(), nullable=True),
        sa.Column("taurine", sa.Float(), nullable=True),
        sa.Column("vitamin_a", sa.Float(), nullable=True),
        sa.Column("vitamin_b1", sa.Float(), nullable=True),
        sa.Column("vitamin_b2", sa.Float(), nullable=True),
        sa.Column("vitamin_b3", sa.Float(), nullable=True),
        sa.Column("vitamin_b5", sa.Float(), nullable=True),
        sa.Column("vitamin_b6", sa.Float(), nullable=True),
        sa.Column("folic_acid", sa.Float(), nullable=True),
        sa.Column("vitamin_b12", sa.Float(), nullable=True),
        sa.Column("vitamin_c", sa.Float(), nullable=True),
        sa.Column("vitamin_d", sa.Float(), nullable=True),
        sa.Column("vitamin_e", sa.Float(), nullable=True),
        sa.Column("vitamin_k", sa.Float(), nullable=True),
        sa.Column("zinc", sa.Float(), nullable=True),
        sa.Column("retinol", sa.Float(), nullable=True),
        sa.Column("thiamine", sa.Float(), nullable=True),
        sa.Column("riboflavin", sa.Float(), nullable=True),
        sa.Column("pyridoxine", sa.Float(), nullable=True),
        sa.Column("niacin", sa.Float(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_products")),
        schema="food_tracker",
    )
    op.create_index(
        op.f("ix_food_tracker_products_barcode"),
        "products",
        ["barcode"],
        unique=False,
        schema="food_tracker",
    )
    op.create_index(
        op.f("ix_food_tracker_products_brand"),
        "products",
        ["brand"],
        unique=False,
        schema="food_tracker",
    )
    op.create_index(
        op.f("ix_food_tracker_products_category"),
        "products",
        ["category"],
        unique=False,
        schema="food_tracker",
    )
    op.create_index(
        op.f("ix_food_tracker_products_name"),
        "products",
        ["name"],
        unique=False,
        schema="food_tracker",
    )
    op.create_index(
        op.f("ix_food_tracker_products_parent_category"),
        "products",
        ["parent_category"],
        unique=False,
        schema="food_tracker",
    )
    op.create_index(
        op.f("ix_food_tracker_products_preprocessed_name"),
        "products",
        ["preprocessed_name"],
        unique=False,
        schema="food_tracker",
    )
    op.create_index(
        "ix_food_tracker_products_preprocessed_name_gin_trgm",
        "products",
        ["preprocessed_name"],
        unique=False,
        schema="food_tracker",
        postgresql_ops={"preprocessed_name": "gin_trgm_ops"},
        postgresql_using="gin",
    )
    op.create_table(
        "products_diet_types_association",
        sa.Column("product_id", sa.String(), nullable=False),
        sa.Column("diet_type_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["diet_type_id"],
            ["food_tracker.diet_types.id"],
            name=op.f("fk_products_diet_types_association_diet_type_id_diet_types"),
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["food_tracker.products.id"],
            name=op.f("fk_products_diet_types_association_product_id_products"),
        ),
        sa.PrimaryKeyConstraint(
            "product_id",
            "diet_type_id",
            name=op.f("pk_products_diet_types_association"),
        ),
        schema="food_tracker",
    )
    op.add_column(
        "items",
        sa.Column(
            "top_similar_names",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=False,
        ),
        schema="food_tracker",
    )
    op.drop_constraint(
        op.f("fk_items_product_id_products"),
        "items",
        schema="food_tracker",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "fk_items_product_id_products",
        "items",
        "products",
        ["product_id"],
        ["id"],
        source_schema="food_tracker",
        referent_schema="food_tracker",
    )
    op.drop_column("items", "ids_of_products_with_similar_names", schema="food_tracker")
    op.add_column(
        "houses_nutritionists_association",
        sa.Column("nutritionist_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        schema="food_tracker",
    )
    op.create_foreign_key(
        "fk_houses_nutritionists_association_nutritionist_id_nut_5cb3",
        "houses_nutritionists_association",
        "nutritionists",
        ["nutritionist_id"],
        ["id"],
        source_schema="food_tracker",
        referent_schema="food_tracker",
    )
    op.drop_column("houses_nutritionists_association", "user_id", schema="food_tracker")
    op.add_column(
        "houses_members_association",
        sa.Column("member_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        schema="food_tracker",
    )
    op.create_foreign_key(
        "fk_houses_members_association_member_id_members",
        "houses_members_association",
        "members",
        ["member_id"],
        ["id"],
        source_schema="food_tracker",
        referent_schema="food_tracker",
    )
    op.drop_column("houses_members_association", "user_id", schema="food_tracker")
    op.create_foreign_key(
        "fk_houses_owner_id_owners",
        "houses",
        "owners",
        ["owner_id"],
        ["id"],
        source_schema="food_tracker",
        referent_schema="food_tracker",
    )
    op.drop_index(
        op.f("ix_food_tracker_houses_owner_id"),
        table_name="houses",
        schema="food_tracker",
    )
    # ### end Alembic commands ###

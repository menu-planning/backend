"""create tags table on shared kernel and delete cuisines, flavors, etc

Revision ID: 66a376c8f145
Revises: 1e33ab62bd3d
Create Date: 2025-01-22 23:38:45.212781

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "66a376c8f145"
down_revision = "1e33ab62bd3d"
branch_labels = None
depends_on = None


def upgrade() -> None:
    op.rename_table("classification", "classifications", schema="products_catalog")
    # op.drop_table("meals_tags_association", schema="recipes_catalog")
    # op.drop_table("recipes_tags_association", schema="recipes_catalog")
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table(
    #     "classifications",
    #     sa.Column("id", sa.String(), nullable=False),
    #     sa.Column("name", sa.String(), nullable=False),
    #     sa.Column("author_id", sa.String(), nullable=False),
    #     sa.Column("description", sa.String(), nullable=True),
    #     sa.Column(
    #         "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
    #     ),
    #     sa.Column(
    #         "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
    #     ),
    #     sa.Column("discarded", sa.Boolean(), nullable=False),
    #     sa.Column("version", sa.Integer(), nullable=False),
    #     sa.Column("type", sa.String(), nullable=False),
    #     sa.PrimaryKeyConstraint("id", name=op.f("pk_classifications")),
    #     schema="products_catalog",
    # )
    op.create_index(
        op.f("ix_products_catalog_classifications_created_at"),
        "classifications",
        ["created_at"],
        unique=False,
        schema="products_catalog",
    )
    op.create_table(
        "menus",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("author_id", sa.String(), nullable=False),
        sa.Column("client_id", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("discarded", sa.Boolean(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_menus")),
        schema="recipes_catalog",
    )
    op.create_index(
        op.f("ix_recipes_catalog_menus_created_at"),
        "menus",
        ["created_at"],
        unique=False,
        schema="recipes_catalog",
    )
    op.create_table(
        "tags",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("key", sa.String(), nullable=False),
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("author_id", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tags")),
        schema="shared_kernel",
    )
    op.create_index(
        "tags_author_id_type,unique",
        "tags",
        ["author_id", "type"],
        unique=True,
        schema="shared_kernel",
    )
    op.create_index(
        "tags_key_value_author_id_type,unique",
        "tags",
        ["key", "value", "author_id", "type"],
        unique=True,
        schema="shared_kernel",
    )
    op.create_table(
        "menu_items",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("menu_id", sa.String(), nullable=True),
        sa.Column("meal_id", sa.String(), nullable=True),
        sa.Column("week", sa.String(), nullable=False),
        sa.Column("weekday", sa.String(), nullable=False),
        sa.Column("hour", sa.Time(), nullable=False),
        sa.Column("meal_type", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["meal_id"],
            ["recipes_catalog.meals.id"],
            name=op.f("fk_menu_items_meal_id_meals"),
        ),
        sa.ForeignKeyConstraint(
            ["menu_id"],
            ["recipes_catalog.menus.id"],
            name=op.f("fk_menu_items_menu_id_menus"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_menu_items")),
        schema="recipes_catalog",
    )
    op.create_index(
        op.f("ix_recipes_catalog_menu_items_meal_type"),
        "menu_items",
        ["meal_type"],
        unique=False,
        schema="recipes_catalog",
    )
    op.create_index(
        "menu_items_menu_id_meal_type_idx",
        "menu_items",
        ["menu_id", "meal_type"],
        unique=False,
        schema="recipes_catalog",
    )
    op.create_index(
        "menu_items_menu_id_week_weekday_meal_type_idx",
        "menu_items",
        ["menu_id", "week", "weekday", "meal_type"],
        unique=True,
        schema="recipes_catalog",
    )
    op.drop_constraint(
        "fk_products_food_group_id_tags",
        "products",
        schema="products_catalog",
        type_="foreignkey",
    )
    op.drop_constraint(
        "fk_products_process_type_id_tags",
        "products",
        schema="products_catalog",
        type_="foreignkey",
    )
    op.drop_constraint(
        "fk_products_parent_category_id_tags",
        "products",
        schema="products_catalog",
        type_="foreignkey",
    )
    op.drop_constraint(
        "fk_products_category_id_tags",
        "products",
        schema="products_catalog",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("fk_products_food_group_id_classifications"),
        "products",
        "classifications",
        ["food_group_id"],
        ["id"],
        source_schema="products_catalog",
        referent_schema="products_catalog",
    )
    op.create_foreign_key(
        op.f("fk_products_category_id_classifications"),
        "products",
        "classifications",
        ["category_id"],
        ["id"],
        source_schema="products_catalog",
        referent_schema="products_catalog",
    )
    op.create_foreign_key(
        op.f("fk_products_process_type_id_classifications"),
        "products",
        "classifications",
        ["process_type_id"],
        ["id"],
        source_schema="products_catalog",
        referent_schema="products_catalog",
    )
    op.create_foreign_key(
        op.f("fk_products_parent_category_id_classifications"),
        "products",
        "classifications",
        ["parent_category_id"],
        ["id"],
        source_schema="products_catalog",
        referent_schema="products_catalog",
    )
    op.execute("DELETE FROM recipes_catalog.meals_tags_association")
    op.drop_constraint(
        "fk_meals_tags_association_tag_id_tags",
        "meals_tags_association",
        schema="recipes_catalog",
        type_="foreignkey",
    )
    # Use raw SQL with the USING clause to alter the column type
    op.execute(
        """
        ALTER TABLE recipes_catalog.meals_tags_association
        ALTER COLUMN tag_id TYPE INTEGER USING tag_id::INTEGER
        """
    )
    # op.alter_column(
    #     "meals_tags_association",
    #     "tag_id",
    #     existing_type=sa.VARCHAR(),
    #     type_=sa.Integer(),
    #     existing_nullable=False,
    #     schema="recipes_catalog",
    # )
    op.create_foreign_key(
        op.f("fk_meals_tags_association_tag_id_tags"),
        "meals_tags_association",
        "tags",
        ["tag_id"],
        ["id"],
        source_schema="recipes_catalog",
        referent_schema="shared_kernel",
    )
    op.drop_index(
        "ix_recipes_catalog_recipes_cuisine_id",
        table_name="recipes",
        schema="recipes_catalog",
    )
    op.drop_index(
        "ix_recipes_catalog_recipes_flavor_id",
        table_name="recipes",
        schema="recipes_catalog",
    )
    op.drop_index(
        "ix_recipes_catalog_recipes_texture_id",
        table_name="recipes",
        schema="recipes_catalog",
    )
    op.drop_constraint(
        "fk_recipes_cuisine_id_cuisines",
        "recipes",
        schema="recipes_catalog",
        type_="foreignkey",
    )
    op.drop_constraint(
        "fk_recipes_texture_id_textures",
        "recipes",
        schema="recipes_catalog",
        type_="foreignkey",
    )
    op.drop_constraint(
        "fk_recipes_flavor_id_flavors",
        "recipes",
        schema="recipes_catalog",
        type_="foreignkey",
    )
    op.drop_column("recipes", "texture_id", schema="recipes_catalog")
    op.drop_column("recipes", "flavor_id", schema="recipes_catalog")
    op.drop_column("recipes", "servings", schema="recipes_catalog")
    op.drop_column("recipes", "cuisine_id", schema="recipes_catalog")

    op.execute("DELETE FROM recipes_catalog.recipes_tags_association")
    op.drop_constraint(
        "fk_recipes_tags_association_tag_id_tags",
        "recipes_tags_association",
        schema="recipes_catalog",
        type_="foreignkey",
    )
    # Use raw SQL with the USING clause to alter the column type
    op.execute(
        """
        ALTER TABLE recipes_catalog.recipes_tags_association
        ALTER COLUMN tag_id TYPE INTEGER USING tag_id::INTEGER
        """
    )
    # op.alter_column(
    #     "recipes_tags_association",
    #     "tag_id",
    #     existing_type=sa.VARCHAR(),
    #     type_=sa.Integer(),
    #     existing_nullable=False,
    #     schema="recipes_catalog",
    # )
    op.create_foreign_key(
        op.f("fk_recipes_tags_association_tag_id_tags"),
        "recipes_tags_association",
        "tags",
        ["tag_id"],
        ["id"],
        source_schema="recipes_catalog",
        referent_schema="shared_kernel",
    )
    # ### end Alembic commands ###
    op.drop_table("products_diet_types_association", schema="products_catalog")
    op.drop_table("products_allergens_association", schema="products_catalog")
    op.drop_table("products_tags_association", schema="products_catalog")

    op.drop_table("meals_allergens_association", schema="recipes_catalog")
    op.drop_table("meals_cuisines_association", schema="recipes_catalog")
    op.drop_table("meals_flavors_association", schema="recipes_catalog")
    op.drop_table("meals_textures_association", schema="recipes_catalog")

    op.drop_table("recipes_diet_types_association", schema="recipes_catalog")
    op.drop_table("recipes_allergens_association", schema="recipes_catalog")
    op.drop_table("recipes_season_association", schema="recipes_catalog")

    op.drop_table("flavors", schema="shared_kernel")
    op.drop_table("textures", schema="shared_kernel")
    op.drop_table("cuisines", schema="shared_kernel")
    op.drop_table("allergens", schema="shared_kernel")
    op.drop_constraint(
        "fk_meals_diet_types_association_diet_type_id_diet_types",
        "meals_diet_types_association",
        schema="recipes_catalog",
        type_="foreignkey",
    )
    op.drop_table("diet_types", schema="shared_kernel")
    op.drop_constraint(
        "fk_meals_season_association_season_id_months",
        "meals_season_association",
        schema="recipes_catalog",
        type_="foreignkey",
    )
    op.drop_table("months", schema="recipes_catalog")

    op.drop_table("tags", schema="recipes_catalog")


def downgrade() -> None:
    op.create_table(
        "allergens",
        sa.Column("id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_allergens")),
        schema="shared_kernel",
    )
    op.create_table(
        "cuisines",
        sa.Column("id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_cuisines")),
        schema="shared_kernel",
    )
    op.create_table(
        "flavors",
        sa.Column("id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_flavors")),
        schema="shared_kernel",
    )
    op.create_table(
        "textures",
        sa.Column("id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_textures")),
        schema="shared_kernel",
    )
    op.create_table(
        "diet_types",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("author_id", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("privacy", sa.String(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("discarded", sa.Boolean(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_diet_types")),
        schema="shared_kernel",
    )
    op.create_foreign_key(
        op.f("fk_recipes_texture_id_textures"),
        "recipes",
        "textures",
        ["texture_id"],
        ["id"],
        source_schema="recipes_catalog",
        referent_schema="shared_kernel",
    )
    op.create_foreign_key(
        op.f("fk_recipes_cuisine_id_cuisines"),
        "recipes",
        "cuisines",
        ["cuisine_id"],
        ["id"],
        source_schema="recipes_catalog",
        referent_schema="shared_kernel",
    )
    op.create_foreign_key(
        op.f("fk_recipes_flavor_id_flavors"),
        "recipes",
        "flavors",
        ["flavor_id"],
        ["id"],
        source_schema="recipes_catalog",
        referent_schema="shared_kernel",
    )
    op.create_table(
        "products_allergens_association",
        sa.Column("product_id", sa.String(), nullable=False),
        sa.Column("allergen_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["allergen_id"],
            ["shared_kernel.allergens.id"],
            name=op.f("fk_products_allergens_association_allergen_id_allergens"),
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products_catalog.products.id"],
            name=op.f("fk_products_allergens_association_product_id_products"),
        ),
        sa.PrimaryKeyConstraint(
            "product_id", "allergen_id", name=op.f("pk_products_allergens_association")
        ),
        schema="products_catalog",
    )
    op.create_table(
        "products_diet_types_association",
        sa.Column("product_id", sa.String(), nullable=False),
        sa.Column("diet_type_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["diet_type_id"],
            ["shared_kernel.diet_types.id"],
            name=op.f("fk_products_diet_types_association_diet_type_id_diet_types"),
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products_catalog.products.id"],
            name=op.f("fk_products_diet_types_association_product_id_products"),
        ),
        sa.PrimaryKeyConstraint(
            "product_id",
            "diet_type_id",
            name=op.f("pk_products_diet_types_association"),
        ),
        schema="products_catalog",
    )
    op.create_table(
        "products_tags_association",
        sa.Column("product_id", sa.String(), nullable=False),
        sa.Column("tag_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products_catalog.products.id"],
            name=op.f("fk_products_tags_association_product_id_products"),
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["products_catalog.tags.id"],
            name=op.f("fk_products_tags_association_tag_id_tags"),
        ),
        sa.PrimaryKeyConstraint(
            "product_id", "tag_id", name=op.f("pk_products_tags_association")
        ),
        schema="products_catalog",
    )
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("fk_recipes_tags_association_tag_id_tags"),
        "recipes_tags_association",
        schema="recipes_catalog",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "fk_recipes_tags_association_tag_id_tags",
        "recipes_tags_association",
        "tags",
        ["tag_id"],
        ["id"],
        source_schema="recipes_catalog",
        referent_schema="recipes_catalog",
    )
    op.alter_column(
        "recipes_tags_association",
        "tag_id",
        existing_type=sa.Integer(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
        schema="recipes_catalog",
    )
    op.add_column(
        "recipes",
        sa.Column("cuisine_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        schema="recipes_catalog",
    )
    op.add_column(
        "recipes",
        sa.Column("servings", sa.INTEGER(), autoincrement=False, nullable=True),
        schema="recipes_catalog",
    )
    op.add_column(
        "recipes",
        sa.Column("flavor_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        schema="recipes_catalog",
    )
    op.add_column(
        "recipes",
        sa.Column("texture_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        schema="recipes_catalog",
    )
    op.create_foreign_key(
        "fk_recipes_flavor_id_flavors",
        "recipes",
        "flavors",
        ["flavor_id"],
        ["id"],
        source_schema="recipes_catalog",
        referent_schema="shared_kernel",
    )
    op.create_foreign_key(
        "fk_recipes_texture_id_textures",
        "recipes",
        "textures",
        ["texture_id"],
        ["id"],
        source_schema="recipes_catalog",
        referent_schema="shared_kernel",
    )
    op.create_foreign_key(
        "fk_recipes_cuisine_id_cuisines",
        "recipes",
        "cuisines",
        ["cuisine_id"],
        ["id"],
        source_schema="recipes_catalog",
        referent_schema="shared_kernel",
    )
    op.create_index(
        "ix_recipes_catalog_recipes_texture_id",
        "recipes",
        ["texture_id"],
        unique=False,
        schema="recipes_catalog",
    )
    op.create_index(
        "ix_recipes_catalog_recipes_flavor_id",
        "recipes",
        ["flavor_id"],
        unique=False,
        schema="recipes_catalog",
    )
    op.create_index(
        "ix_recipes_catalog_recipes_cuisine_id",
        "recipes",
        ["cuisine_id"],
        unique=False,
        schema="recipes_catalog",
    )
    op.drop_constraint(
        op.f("fk_meals_tags_association_tag_id_tags"),
        "meals_tags_association",
        schema="recipes_catalog",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "fk_meals_tags_association_tag_id_tags",
        "meals_tags_association",
        "tags",
        ["tag_id"],
        ["id"],
        source_schema="recipes_catalog",
        referent_schema="recipes_catalog",
    )
    op.alter_column(
        "meals_tags_association",
        "tag_id",
        existing_type=sa.Integer(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
        schema="recipes_catalog",
    )
    op.drop_constraint(
        op.f("fk_products_parent_category_id_classifications"),
        "products",
        schema="products_catalog",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_products_process_type_id_classifications"),
        "products",
        schema="products_catalog",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_products_category_id_classifications"),
        "products",
        schema="products_catalog",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_products_food_group_id_classifications"),
        "products",
        schema="products_catalog",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "fk_products_category_id_tags",
        "products",
        "classification",
        ["category_id"],
        ["id"],
        source_schema="products_catalog",
        referent_schema="products_catalog",
    )
    op.create_foreign_key(
        "fk_products_parent_category_id_tags",
        "products",
        "classification",
        ["parent_category_id"],
        ["id"],
        source_schema="products_catalog",
        referent_schema="products_catalog",
    )
    op.create_foreign_key(
        "fk_products_process_type_id_tags",
        "products",
        "classification",
        ["process_type_id"],
        ["id"],
        source_schema="products_catalog",
        referent_schema="products_catalog",
    )
    op.create_foreign_key(
        "fk_products_food_group_id_tags",
        "products",
        "classification",
        ["food_group_id"],
        ["id"],
        source_schema="products_catalog",
        referent_schema="products_catalog",
    )
    op.drop_index(
        "menu_items_menu_id_week_weekday_meal_type_idx",
        table_name="menu_items",
        schema="recipes_catalog",
    )
    op.drop_index(
        "menu_items_menu_id_meal_type_idx",
        table_name="menu_items",
        schema="recipes_catalog",
    )
    op.drop_index(
        op.f("ix_recipes_catalog_menu_items_meal_type"),
        table_name="menu_items",
        schema="recipes_catalog",
    )
    op.drop_table("menu_items", schema="recipes_catalog")
    op.drop_index(
        "tags_key_value_author_id_type,unique",
        table_name="tags",
        schema="shared_kernel",
    )
    op.drop_index(
        "tags_author_id_type,unique", table_name="tags", schema="shared_kernel"
    )
    op.drop_table("tags", schema="shared_kernel")
    op.drop_index(
        op.f("ix_recipes_catalog_menus_created_at"),
        table_name="menus",
        schema="recipes_catalog",
    )
    op.drop_table("menus", schema="recipes_catalog")
    op.drop_index(
        op.f("ix_products_catalog_classifications_created_at"),
        table_name="classifications",
        schema="products_catalog",
    )
    # op.drop_table("classifications", schema="products_catalog")
    # ### end Alembic commands ###
    op.rename_table("classifications", "classification", schema="products_catalog")

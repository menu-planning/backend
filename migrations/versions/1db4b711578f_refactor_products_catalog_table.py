"""refactor products_catalog table

Revision ID: 1db4b711578f
Revises: 556c112cae09
Create Date: 2024-03-15 17:07:15.939839

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "1db4b711578f"
down_revision = "556c112cae09"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tags",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("author_id", sa.String(), nullable=False),
        sa.Column("author_role", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("discarded", sa.Boolean(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tags")),
        schema="products_catalog",
    )
    op.create_table(
        "products_tags_association",
        sa.Column("product_id", sa.String(), nullable=False),
        sa.Column("tag_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products_catalog.products.id"],
            name=op.f("fk_products_tags_association_product_id_products"),
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["products_catalog.tags.id"],
            name=op.f("fk_products_tags_association_tag_id_tags"),
        ),
        sa.PrimaryKeyConstraint(
            "product_id", "tag_id", name=op.f("pk_products_tags_association")
        ),
        schema="products_catalog",
    )
    op.add_column(
        "products",
        sa.Column("source_id", sa.String(), nullable=True),
        schema="products_catalog",
    )
    op.add_column(
        "products",
        sa.Column("category_id", sa.String(), nullable=True),
        schema="products_catalog",
    )
    op.add_column(
        "products",
        sa.Column("parent_category_id", sa.String(), nullable=True),
        schema="products_catalog",
    )
    op.add_column(
        "products",
        sa.Column("food_group_id", sa.String(), nullable=True),
        schema="products_catalog",
    )
    op.add_column(
        "products",
        sa.Column("process_type_id", sa.String(), nullable=True),
        schema="products_catalog",
    )
    op.create_foreign_key(
        op.f("fk_products_category_id_tags"),
        "products",
        "tags",
        ["category_id"],
        ["id"],
        source_schema="products_catalog",
        referent_schema="products_catalog",
    )
    op.create_foreign_key(
        op.f("fk_products_food_group_id_tags"),
        "products",
        "tags",
        ["food_group_id"],
        ["id"],
        source_schema="products_catalog",
        referent_schema="products_catalog",
    )
    op.create_foreign_key(
        op.f("fk_products_parent_category_id_tags"),
        "products",
        "tags",
        ["parent_category_id"],
        ["id"],
        source_schema="products_catalog",
        referent_schema="products_catalog",
    )
    op.create_foreign_key(
        op.f("fk_products_source_id_tags"),
        "products",
        "tags",
        ["source_id"],
        ["id"],
        source_schema="products_catalog",
        referent_schema="products_catalog",
    )
    op.create_foreign_key(
        op.f("fk_products_process_type_id_tags"),
        "products",
        "tags",
        ["process_type_id"],
        ["id"],
        source_schema="products_catalog",
        referent_schema="products_catalog",
    )
    # for column in ["category", "parent_category", "source"]:
    #     op.execute(
    #         f"""
    #         INSERT INTO products_catalog.tags (id, name, author_id, author_role, description, created_at, updated_at, discarded, version, type)
    #         SELECT
    #             gen_random_uuid(),
    #             {column},
    #             '1',
    #             'administrator',
    #             NULL,
    #             now(),
    #             now(),
    #             FALSE,
    #             1,
    #             '{column}'
    #         FROM (
    #             SELECT DISTINCT {column}
    #             FROM products_catalog.products
    #             WHERE {column} IS NOT NULL
    #         ) AS distinct_values
    #         """
    #     )
    # for old_column, new_column in [
    #     ("source", "source_id"),
    #     ("category", "category_id"),
    #     ("parent_category", "parent_category_id"),
    # ]:
    #     op.execute(
    #         """
    #         UPDATE products_catalog.products
    #         SET {1} = (
    #             SELECT id FROM products_catalog.tags
    #             WHERE tags.name = products_catalog.products.{0}
    #             AND tags.type = '{0}'
    #         )
    #         """.format(
    #             old_column, new_column
    #         )
    #     )
    # op.execute(
    #     "ALTER TABLE products_catalog.products ALTER COLUMN source_id SET NOT NULL"
    # )
    op.drop_index(
        "ix_products_catalog_products_category",
        table_name="products",
        schema="products_catalog",
    )
    op.drop_index(
        "ix_products_catalog_products_parent_category",
        table_name="products",
        schema="products_catalog",
    )
    op.drop_column("products", "category", schema="products_catalog")
    op.drop_column("products", "parent_category", schema="products_catalog")
    op.drop_column("products", "source", schema="products_catalog")
    op.drop_column("products", "process_type", schema="products_catalog")
    op.drop_column("products", "food_group", schema="products_catalog")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "products",
        sa.Column("food_group", sa.VARCHAR(), autoincrement=False, nullable=True),
        schema="products_catalog",
    )
    op.add_column(
        "products",
        sa.Column("process_type", sa.VARCHAR(), autoincrement=False, nullable=True),
        schema="products_catalog",
    )
    op.add_column(
        "products",
        sa.Column("source", sa.VARCHAR(), autoincrement=False, nullable=False),
        schema="products_catalog",
    )
    op.add_column(
        "products",
        sa.Column("parent_category", sa.VARCHAR(), autoincrement=False, nullable=True),
        schema="products_catalog",
    )
    op.add_column(
        "products",
        sa.Column("category", sa.VARCHAR(), autoincrement=False, nullable=True),
        schema="products_catalog",
    )
    op.drop_constraint(
        op.f("fk_products_process_type_id_tags"),
        "products",
        schema="products_catalog",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_products_source_id_tags"),
        "products",
        schema="products_catalog",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_products_parent_category_id_tags"),
        "products",
        schema="products_catalog",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_products_food_group_id_tags"),
        "products",
        schema="products_catalog",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_products_category_id_tags"),
        "products",
        schema="products_catalog",
        type_="foreignkey",
    )
    op.create_index(
        "ix_products_catalog_products_parent_category",
        "products",
        ["parent_category"],
        unique=False,
        schema="products_catalog",
    )
    op.create_index(
        "ix_products_catalog_products_category",
        "products",
        ["category"],
        unique=False,
        schema="products_catalog",
    )
    op.drop_column("products", "process_type_id", schema="products_catalog")
    op.drop_column("products", "food_group_id", schema="products_catalog")
    op.drop_column("products", "parent_category_id", schema="products_catalog")
    op.drop_column("products", "category_id", schema="products_catalog")
    op.drop_column("products", "source_id", schema="products_catalog")
    op.drop_table("products_tags_association", schema="products_catalog")
    op.drop_table("tags", schema="products_catalog")
    # ### end Alembic commands ###

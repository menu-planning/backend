"""delete receipt_tracker and food_tracker

Revision ID: 27d2b4491590
Revises: 7ccc1e2b4bd5
Create Date: 2025-10-08 16:15:36.728560

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '27d2b4491590'
down_revision = '7ccc1e2b4bd5'
branch_labels = None
depends_on = None


def upgrade() -> None:
    op.execute("DROP SCHEMA IF EXISTS receipt_tracker CASCADE")
    op.execute("DROP SCHEMA IF EXISTS food_tracker CASCADE")


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE SCHEMA IF NOT EXISTS food_tracker")
    op.execute("CREATE SCHEMA IF NOT EXISTS receipt_tracker")
    op.create_table(
        "houses",
        sa.Column("id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_houses")),
        schema="receipt_tracker",
    )
    op.create_table(
        "sellers",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("state_registration", sa.String(), nullable=False),
        sa.Column("street", sa.String(), nullable=False),
        sa.Column("number", sa.String(), nullable=False),
        sa.Column("zip_code", sa.String(), nullable=False),
        sa.Column("district", sa.String(), nullable=False),
        sa.Column("city", sa.String(), nullable=False),
        sa.Column("state", sa.String(), nullable=False),
        sa.Column("complement", sa.String(), nullable=True),
        sa.Column("note", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_sellers")),
        schema="receipt_tracker",
    )
    op.create_table(
        "receipts",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("qrcode", sa.String(), nullable=True),
        sa.Column("date", sa.DateTime(), nullable=True),
        sa.Column("state", sa.String(), nullable=True),
        sa.Column("seller_id", sa.String(), nullable=True),
        sa.Column("scraped", sa.Boolean(), nullable=True),
        sa.Column("products_added", sa.Boolean(), nullable=False),
        sa.Column("discarded", sa.Boolean(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["seller_id"],
            ["receipt_tracker.sellers.id"],
            name=op.f("fk_receipts_seller_id_sellers"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_receipts")),
        schema="receipt_tracker",
    )
    op.create_table(
        "items",
        sa.Column("number", sa.Integer(), nullable=False),
        sa.Column("receipt_id", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column("unit", sa.String(), nullable=False),
        sa.Column("price_paid", sa.Float(), nullable=False),
        sa.Column("price_per_unit", sa.Float(), nullable=False),
        sa.Column("gross_price", sa.Float(), nullable=False),
        sa.Column("sellers_product_code", sa.String(), nullable=False),
        sa.Column("barcode", sa.String(), nullable=False),
        sa.Column("discount", sa.Float(), nullable=True),
        sa.Column("product_id", sa.String(), nullable=True),
        sa.Column("product_name", sa.String(), nullable=True),
        sa.Column("product_source", sa.String(), nullable=True),
        sa.Column("product_is_food", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["receipt_id"],
            ["receipt_tracker.receipts.id"],
            name=op.f("fk_items_receipt_id_receipts"),
        ),
        sa.PrimaryKeyConstraint("number", "receipt_id", name=op.f("pk_items")),
        schema="receipt_tracker",
    )
    op.create_table(
        "receipts_houses_association",
        sa.Column("receipt_id", sa.String(), nullable=False),
        sa.Column("house_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["house_id"],
            ["receipt_tracker.houses.id"],
            name=op.f("fk_receipts_houses_association_house_id_houses"),
        ),
        sa.ForeignKeyConstraint(
            ["receipt_id"],
            ["receipt_tracker.receipts.id"],
            name=op.f("fk_receipts_houses_association_receipt_id_receipts"),
        ),
        sa.PrimaryKeyConstraint(
            "receipt_id", "house_id", name=op.f("pk_receipts_houses_association")
        ),
        schema="receipt_tracker",
    )
    op.create_table(
        "receipts",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("qrcode", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_receipts")),
        schema="food_tracker",
    )
    op.create_table(
        "houses",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("owner_id", sa.String(), nullable=False),
        sa.Column("discarded", sa.Boolean(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_houses")),
        schema="food_tracker",
    )
    op.create_index(
        op.f("ix_food_tracker_houses_owner_id"),
        "houses",
        ["owner_id"],
        unique=False,
        schema="food_tracker",
    )
    op.create_table(
        "items",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("house_id", sa.String(), nullable=False),
        sa.Column("date", sa.DateTime(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column(
            "ids_of_products_with_similar_names",
            postgresql.ARRAY(sa.String()),
            nullable=False,
        ),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("unit", sa.String(), nullable=False),
        sa.Column("is_food", sa.Boolean(), nullable=True),
        sa.Column("product_id", sa.String(), nullable=True),
        sa.Column("price_per_unit", sa.Float(), nullable=True),
        sa.Column("barcode", sa.String(), nullable=True),
        sa.Column("cfe_key", sa.String(), nullable=True),
        sa.Column("discarded", sa.Boolean(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["house_id"],
            ["food_tracker.houses.id"],
            name=op.f("fk_items_house_id_houses"),
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products_catalog.products.id"],
            name=op.f("fk_items_product_id_products"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_items")),
        schema="food_tracker",
    )
    op.create_table(
        "houses_members_association",
        sa.Column("house_id", sa.String(), nullable=False),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["house_id"],
            ["food_tracker.houses.id"],
            name=op.f("fk_houses_members_association_house_id_houses"),
        ),
        sa.PrimaryKeyConstraint(
            "house_id", "user_id", name=op.f("pk_houses_members_association")
        ),
        schema="food_tracker",
    )
    op.create_table(
        "houses_nutritionists_association",
        sa.Column("house_id", sa.String(), nullable=False),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["house_id"],
            ["food_tracker.houses.id"],
            name=op.f("fk_houses_nutritionists_association_house_id_houses"),
        ),
        sa.PrimaryKeyConstraint(
            "house_id", "user_id", name=op.f("pk_houses_nutritionists_association")
        ),
        schema="food_tracker",
    )
    op.create_table(
        "houses_receipts_association",
        sa.Column("house_id", sa.String(), nullable=False),
        sa.Column("receipt_id", sa.String(), nullable=False),
        sa.Column("state", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["house_id"],
            ["food_tracker.houses.id"],
            name=op.f("fk_houses_receipts_association_house_id_houses"),
        ),
        sa.ForeignKeyConstraint(
            ["receipt_id"],
            ["food_tracker.receipts.id"],
            name=op.f("fk_houses_receipts_association_receipt_id_receipts"),
        ),
        sa.PrimaryKeyConstraint(
            "house_id", "receipt_id", name=op.f("pk_houses_receipts_association")
        ),
        schema="food_tracker",
    )
    # ### end Alembic commands ###

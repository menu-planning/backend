"""add onboarding tables

Revision ID: b7f3c4d5e8a1
Revises: a243355adf21
Create Date: 2024-12-19 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b7f3c4d5e8a1'
down_revision = 'a243355adf21'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create client_onboarding schema
    op.execute("CREATE SCHEMA IF NOT EXISTS client_onboarding")
    
    # Create enum type for onboarding form status within the schema
    op.execute("CREATE TYPE client_onboarding.onboardingformstatus AS ENUM ('draft', 'active', 'paused', 'completed', 'deleted')")
    
    # Create onboarding_forms table
    op.create_table('onboarding_forms',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('typeform_id', sa.String(length=255), nullable=False),
        sa.Column('webhook_url', sa.Text(), nullable=False),
        sa.Column('status', sa.Text(), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_onboarding_forms')),
        schema='client_onboarding'
    )
    
    # Manually alter the column to use the enum type
    op.execute("ALTER TABLE client_onboarding.onboarding_forms ALTER COLUMN status TYPE client_onboarding.onboardingformstatus USING status::client_onboarding.onboardingformstatus")
    op.execute("ALTER TABLE client_onboarding.onboarding_forms ALTER COLUMN status SET DEFAULT 'draft'")
    
    op.create_index(op.f('ix_client_onboarding_onboarding_forms_id'), 'onboarding_forms', ['id'], unique=False, schema='client_onboarding')
    op.create_index(op.f('ix_client_onboarding_onboarding_forms_user_id'), 'onboarding_forms', ['user_id'], unique=False, schema='client_onboarding')
    op.create_index(op.f('ix_client_onboarding_onboarding_forms_typeform_id'), 'onboarding_forms', ['typeform_id'], unique=True, schema='client_onboarding')
    
    # Create form_responses table
    op.create_table('form_responses',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('form_id', sa.Integer(), nullable=False),
        sa.Column('response_data', postgresql.JSON(astext_type=sa.Text()), nullable=False),
        sa.Column('client_identifiers', postgresql.JSON(astext_type=sa.Text()), nullable=True),
        sa.Column('response_id', sa.Text(), nullable=False),
        sa.Column('submission_id', sa.Text(), nullable=True),
        sa.Column('submitted_at', sa.DateTime(), nullable=False),
        sa.Column('processed_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['form_id'], ['client_onboarding.onboarding_forms.id'], name=op.f('fk_form_responses_form_id_onboarding_forms')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_form_responses')),
        schema='client_onboarding'
    )
    op.create_index(op.f('ix_client_onboarding_form_responses_id'), 'form_responses', ['id'], unique=False, schema='client_onboarding')
    op.create_index(op.f('ix_client_onboarding_form_responses_form_id'), 'form_responses', ['form_id'], unique=False, schema='client_onboarding')
    op.create_index(op.f('ix_client_onboarding_form_responses_response_id'), 'form_responses', ['response_id'], unique=True, schema='client_onboarding')
    op.create_index(op.f('ix_client_onboarding_form_responses_submission_id'), 'form_responses', ['submission_id'], unique=False, schema='client_onboarding')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop tables in reverse order
    op.drop_index(op.f('ix_client_onboarding_form_responses_submission_id'), table_name='form_responses', schema='client_onboarding')
    op.drop_index(op.f('ix_client_onboarding_form_responses_response_id'), table_name='form_responses', schema='client_onboarding')
    op.drop_index(op.f('ix_client_onboarding_form_responses_form_id'), table_name='form_responses', schema='client_onboarding')
    op.drop_index(op.f('ix_client_onboarding_form_responses_id'), table_name='form_responses', schema='client_onboarding')
    op.drop_table('form_responses', schema='client_onboarding')
    
    op.drop_index(op.f('ix_client_onboarding_onboarding_forms_typeform_id'), table_name='onboarding_forms', schema='client_onboarding')
    op.drop_index(op.f('ix_client_onboarding_onboarding_forms_user_id'), table_name='onboarding_forms', schema='client_onboarding')
    op.drop_index(op.f('ix_client_onboarding_onboarding_forms_id'), table_name='onboarding_forms', schema='client_onboarding')
    op.drop_table('onboarding_forms', schema='client_onboarding')
    
    # Drop enum type
    op.execute("DROP TYPE IF EXISTS client_onboarding.onboardingformstatus")
    
    # Drop schema
    op.execute("DROP SCHEMA IF EXISTS client_onboarding")
    # ### end Alembic commands ### 
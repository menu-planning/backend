{
    "module_path": "src/contexts/seedwork/",
    "test_map": [
        {
            "name": "test_entity_creation_and_identity",
            "purpose": "Entity base class creates with unique ID and proper metadata",
            "layer": "unit",
            "boundaries": [
                "Entity"
            ],
            "notes": "Core domain invariant - ID uniqueness and immutability"
        },
        {
            "name": "test_entity_version_increment_on_update",
            "purpose": "Version increments exactly once per update operation",
            "layer": "unit",
            "boundaries": [
                "Entity"
            ],
            "notes": "Optimistic locking contract - version must increment on mutations"
        },
        {
            "name": "test_entity_discard_lifecycle",
            "purpose": "Entity can be discarded and prevents further modifications",
            "layer": "unit",
            "boundaries": [
                "Entity"
            ],
            "notes": "Lifecycle management - ACTIVE -> DISCARDED transition"
        },
        {
            "name": "test_entity_cached_property_detection",
            "purpose": "Automatically detects and registers cached properties at class creation",
            "layer": "unit",
            "boundaries": [
                "Entity"
            ],
            "notes": "Caching infrastructure - @cached_property detection and tracking"
        },
        {
            "name": "test_entity_cache_invalidation",
            "purpose": "Cache invalidation works for both targeted and full invalidation",
            "layer": "unit",
            "boundaries": [
                "Entity"
            ],
            "notes": "Cache management - invalidation after property updates"
        },
        {
            "name": "test_entity_update_properties_contract",
            "purpose": "Multi-property update follows standardized contract with single version bump",
            "layer": "unit",
            "boundaries": [
                "Entity"
            ],
            "notes": "Update contract - validation, application, post-update hooks, cache invalidation"
        },
        {
            "name": "test_entity_business_rule_validation",
            "purpose": "Business rule checking raises appropriate exceptions",
            "layer": "unit",
            "boundaries": [
                "Entity",
                "BusinessRule"
            ],
            "notes": "Domain validation - rule checking and error handling"
        },
        {
            "name": "test_value_object_immutability",
            "purpose": "Value objects maintain immutability and equality semantics",
            "layer": "unit",
            "boundaries": [
                "ValueObject"
            ],
            "notes": "Value object contract - immutability and value equality"
        },
        {
            "name": "test_command_structure",
            "purpose": "Command objects encapsulate operations with proper validation",
            "layer": "unit",
            "boundaries": [
                "Command"
            ],
            "notes": "Command pattern - operation encapsulation and validation"
        },
        {
            "name": "test_event_structure",
            "purpose": "Domain events capture state changes with proper metadata",
            "layer": "unit",
            "boundaries": [
                "Event"
            ],
            "notes": "Event sourcing - event structure and metadata"
        },
        {
            "name": "test_business_rule_evaluation",
            "purpose": "Business rules evaluate conditions and report violations",
            "layer": "unit",
            "boundaries": [
                "BusinessRule"
            ],
            "notes": "Business logic - rule evaluation and violation reporting"
        },
        {
            "name": "test_permission_enum_values",
            "purpose": "Permission enum provides correct values and validation",
            "layer": "unit",
            "boundaries": [
                "Permission"
            ],
            "notes": "Authorization - permission values and validation"
        },
        {
            "name": "test_role_enum_values",
            "purpose": "Role enum provides correct values and validation",
            "layer": "unit",
            "boundaries": [
                "Role"
            ],
            "notes": "Authorization - role values and validation"
        },
        {
            "name": "test_uow_context_manager",
            "purpose": "UnitOfWork provides proper async context management",
            "layer": "unit",
            "boundaries": [
                "FakeSession"
            ],
            "notes": "Transaction management - context manager contract"
        },
        {
            "name": "test_uow_commit_rollback",
            "purpose": "UnitOfWork commit and rollback operations work correctly",
            "layer": "unit",
            "boundaries": [
                "FakeSession"
            ],
            "notes": "Transaction management - commit/rollback behavior"
        },
        {
            "name": "test_uow_event_collection",
            "purpose": "UnitOfWork collects domain events from tracked objects",
            "layer": "unit",
            "boundaries": [
                "FakeRepo",
                "FakeEvent"
            ],
            "notes": "Event sourcing - event collection from repositories"
        },
        {
            "name": "test_repository_protocol_contract",
            "purpose": "BaseRepository protocol defines correct interface contract",
            "layer": "contract",
            "boundaries": [
                "BaseRepository",
                "CompositeRepository"
            ],
            "notes": "Repository contract - interface compliance verification"
        },
        {
            "name": "test_mapper_protocol_contract",
            "purpose": "ModelMapper protocol defines correct mapping interface",
            "layer": "contract",
            "boundaries": [
                "ModelMapper"
            ],
            "notes": "Mapping contract - domain ↔ ORM interface compliance"
        },
        {
            "name": "test_sa_generic_repository_roundtrip",
            "purpose": "SaGenericRepository CRUD operations work with real database",
            "layer": "integration",
            "boundaries": [
                "async_session"
            ],
            "notes": "Repository implementation - real DB round-trip testing"
        },
        {
            "name": "test_repository_query_building",
            "purpose": "QueryBuilder constructs correct SQL queries from filters",
            "layer": "integration",
            "boundaries": [
                "async_session"
            ],
            "notes": "Query construction - filter to SQL translation"
        },
        {
            "name": "test_repository_join_management",
            "purpose": "JoinManager handles complex relationship queries correctly",
            "layer": "integration",
            "boundaries": [
                "async_session"
            ],
            "notes": "Query optimization - join management and relationship handling"
        },
        {
            "name": "test_repository_filter_mapping",
            "purpose": "FilterColumnMapper translates domain filters to SQL columns",
            "layer": "integration",
            "boundaries": [
                "async_session"
            ],
            "notes": "Filter translation - domain filters to SQL column mapping"
        },
        {
            "name": "test_repository_filter_operators",
            "purpose": "Filter operators generate correct SQL conditions",
            "layer": "integration",
            "boundaries": [
                "async_session"
            ],
            "notes": "Query construction - operator to SQL condition translation"
        },
        {
            "name": "test_repository_logging",
            "purpose": "RepositoryLogger captures query execution and performance data",
            "layer": "integration",
            "boundaries": [
                "async_session"
            ],
            "notes": "Observability - query logging and performance tracking"
        },
        {
            "name": "test_tag_filter_builder",
            "purpose": "TagFilterBuilder constructs complex tag-based queries",
            "layer": "integration",
            "boundaries": [
                "async_session"
            ],
            "notes": "Query construction - tag-based filtering and query building"
        },
        {
            "name": "test_filter_validator",
            "purpose": "FilterValidator validates filter inputs and prevents injection",
            "layer": "integration",
            "boundaries": [
                "FilterValidator"
            ],
            "notes": "Security - input validation and injection prevention"
        },
        {
            "name": "test_mapper_domain_to_sa",
            "purpose": "ModelMapper converts domain entities to SQLAlchemy models",
            "layer": "integration",
            "boundaries": [
                "mapper",
                "session"
            ],
            "notes": "Mapping fidelity - domain → ORM conversion accuracy"
        },
        {
            "name": "test_mapper_sa_to_domain",
            "purpose": "ModelMapper converts SQLAlchemy models to domain entities",
            "layer": "integration",
            "boundaries": [
                "mapper",
                "session"
            ],
            "notes": "Mapping fidelity - ORM → domain conversion accuracy"
        },
        {
            "name": "test_mapper_identity_merge_rules",
            "purpose": "ModelMapper handles entity identity and merge operations correctly",
            "layer": "integration",
            "boundaries": [
                "mapper",
                "session"
            ],
            "notes": "Entity management - identity preservation and merge semantics"
        },
        {
            "name": "test_api_schema_base_models",
            "purpose": "BaseApiModel provides correct Pydantic base functionality",
            "layer": "schema",
            "boundaries": [
                "pydantic"
            ],
            "notes": "API contracts - Pydantic model validation and serialization"
        },
        {
            "name": "test_api_schema_command_models",
            "purpose": "BaseApiCommand validates command payloads correctly",
            "layer": "schema",
            "boundaries": [
                "pydantic"
            ],
            "notes": "Command validation - API command payload validation"
        },
        {
            "name": "test_api_schema_entity_models",
            "purpose": "BaseApiEntity serializes domain entities for API responses",
            "layer": "schema",
            "boundaries": [
                "pydantic"
            ],
            "notes": "Response serialization - domain entity to API response mapping"
        },
        {
            "name": "test_api_schema_value_object_models",
            "purpose": "BaseApiValueObject handles value object serialization",
            "layer": "schema",
            "boundaries": [
                "pydantic"
            ],
            "notes": "Value object serialization - domain value objects to API format"
        },
        {
            "name": "test_api_schema_type_conversion",
            "purpose": "TypeConversionUtility handles complex type conversions",
            "layer": "schema",
            "boundaries": [
                "pydantic"
            ],
            "notes": "Type safety - complex type conversion and validation"
        },
        {
            "name": "test_api_schema_validators",
            "purpose": "Custom validators enforce business rules at API boundary",
            "layer": "schema",
            "boundaries": [
                "pydantic"
            ],
            "notes": "Business validation - custom Pydantic validators"
        },
        {
            "name": "test_api_schema_seed_role",
            "purpose": "ApiSeedRole serializes role value objects correctly",
            "layer": "schema",
            "boundaries": [
                "pydantic"
            ],
            "notes": "Value object serialization - role-specific API schema"
        },
        {
            "name": "test_api_schema_seed_user",
            "purpose": "ApiSeedUser serializes user value objects correctly",
            "layer": "schema",
            "boundaries": [
                "pydantic"
            ],
            "notes": "Value object serialization - user-specific API schema"
        },
        {
            "name": "test_repository_performance_queries",
            "purpose": "Repository queries meet performance thresholds for common operations",
            "layer": "perf",
            "boundaries": [
                "async_session"
            ],
            "notes": "Performance - query execution time and resource usage"
        },
        {
            "name": "test_mapper_performance_conversion",
            "purpose": "ModelMapper conversions meet performance thresholds",
            "layer": "perf",
            "boundaries": [
                "mapper",
                "session"
            ],
            "notes": "Performance - mapping operation speed and memory usage"
        },
        {
            "name": "test_entity_cache_performance",
            "purpose": "Entity caching provides performance benefits for repeated access",
            "layer": "perf",
            "boundaries": [
                "Entity"
            ],
            "notes": "Performance - cache hit rates and computation savings"
        },
        {
            "name": "test_api_schema_validation_performance",
            "purpose": "API schema validation meets performance requirements",
            "layer": "perf",
            "boundaries": [
                "pydantic"
            ],
            "notes": "Performance - validation speed for large payloads"
        },
        {
            "name": "test_repository_sql_injection_prevention",
            "purpose": "Repository layer prevents SQL injection attacks",
            "layer": "security",
            "boundaries": [
                "async_session"
            ],
            "notes": "Security - SQL injection prevention in query building"
        },
        {
            "name": "test_filter_validator_injection_prevention",
            "purpose": "FilterValidator prevents injection attacks in filter inputs",
            "layer": "security",
            "boundaries": [
                "FilterValidator"
            ],
            "notes": "Security - input sanitization and injection prevention"
        },
        {
            "name": "test_api_schema_input_validation",
            "purpose": "API schemas validate and sanitize all external inputs",
            "layer": "security",
            "boundaries": [
                "pydantic"
            ],
            "notes": "Security - input validation and sanitization at API boundary"
        },
        {
            "name": "test_entity_discard_security",
            "purpose": "Entity discard operations maintain security invariants",
            "layer": "security",
            "boundaries": [
                "Entity"
            ],
            "notes": "Security - entity lifecycle security and access control"
        },
        {
            "name": "test_repository_access_control",
            "purpose": "Repository operations respect access control boundaries",
            "layer": "security",
            "boundaries": [
                "async_session"
            ],
            "notes": "Security - data access control and authorization"
        },
        {
            "name": "test_fake_repository_contract",
            "purpose": "FakeRepository implements same contract as real repository",
            "layer": "contract",
            "boundaries": [
                "FakeRepository",
                "BaseRepository"
            ],
            "notes": "Contract compliance - fake and real implementations stay aligned"
        },
        {
            "name": "test_fake_uow_contract",
            "purpose": "FakeUnitOfWork implements same contract as real UoW",
            "layer": "contract",
            "boundaries": [
                "FakeUoW",
                "UnitOfWork"
            ],
            "notes": "Contract compliance - fake and real UoW implementations stay aligned"
        },
        {
            "name": "test_fake_mapper_contract",
            "purpose": "FakeMapper implements same contract as real mapper",
            "layer": "contract",
            "boundaries": [
                "FakeMapper",
                "ModelMapper"
            ],
            "notes": "Contract compliance - fake and real mapper implementations stay aligned"
        },
        {
            "name": "test_repository_exception_handling",
            "purpose": "Repository operations handle exceptions gracefully",
            "layer": "integration",
            "boundaries": [
                "async_session"
            ],
            "notes": "Error handling - repository exception management and recovery"
        },
        {
            "name": "test_mapper_exception_handling",
            "purpose": "ModelMapper handles mapping errors gracefully",
            "layer": "integration",
            "boundaries": [
                "mapper",
                "session"
            ],
            "notes": "Error handling - mapping exception management and recovery"
        },
        {
            "name": "test_uow_exception_handling",
            "purpose": "UnitOfWork handles transaction failures gracefully",
            "layer": "integration",
            "boundaries": [
                "async_session"
            ],
            "notes": "Error handling - transaction exception management and rollback"
        },
        {
            "name": "test_entity_concurrent_access",
            "purpose": "Entity handles concurrent access safely",
            "layer": "unit",
            "boundaries": [
                "Entity"
            ],
            "notes": "Concurrency - entity thread safety and concurrent access"
        },
        {
            "name": "test_repository_concurrent_operations",
            "purpose": "Repository handles concurrent operations safely",
            "layer": "integration",
            "boundaries": [
                "async_session"
            ],
            "notes": "Concurrency - repository concurrent operation safety"
        },
        {
            "name": "test_uow_concurrent_transactions",
            "purpose": "UnitOfWork handles concurrent transactions correctly",
            "layer": "integration",
            "boundaries": [
                "async_session"
            ],
            "notes": "Concurrency - transaction isolation and concurrent access"
        }
    ]
}
[project]
name = "menu-planning"
version = "0.1.0"
description = ""
authors = [{ name = "Your Name", email = "your.email@example.com" }]
requires-python = ">=3.12,<3.14"
dependencies = [
    "dependency-injector>=4.41.0",
    "attrs>=25.1.0",
    "python-dotenv>=1.0.0",
    "python-multipart>=0.0.9",
    "Unidecode>=1.3.8",
    "asyncpg>=0.29.0",
    "yarl>=1.9.4",
    "anyio>=4.0.0",
    "colorlog>=6.8.0",
    "sqlalchemy>=2.0.25",
    "pydantic>=2.5.2",
    "pydantic-settings>=2.1.0",
    "python-json-logger>=3.2.1",
    "email-validator>=2.2.0",
    "greenlet>=3.1.1,<4.0.0",
    "structlog>=25.4.0,<26.0.0",
    "psutil>=7.0.0,<8.0.0",
    "logfire>=4.10.0",
    "pydantic-ai>=1.0.16",
    "fastapi[standard]>=0.116.2",
    "pyjwt>=2.8.0",
    "cryptography>=41.0.0",
    "httpx>=0.28.1,<0.29.0",
    "starlette>=0.41.0",
    "hypercorn>=0.17.3",
    "alembic>=1.14.1",
    "h2>=4.3.0",
    "hyperframe>=6.1.0",
    "h11>=0.16.0",
    "hpack>=4.1.0",
    "priority>=2.0.0",
    "wsproto>=1.2.0",
    "slowapi>=0.0.14",
]

[dependency-groups]
dev = [
    "pytest>=8.3.4",
    "click>=8.1.8",
    "tenacity>=9.0.0",
    "pytest-cov>=6.1.1",
    "pytest-timeout>=2.3.1",
    "pytest-benchmark>=4.0.0",
    "pre-commit>=4.2.0",
    "ruff>=0.12.2",
    "rg>=0.0.75",
    "unimport>=1.2.1",
    "boto3>=1.40.7",
    "python-dotenv>=1.1.1",
    "aiosqlite>=0.21.0",
    "deepdiff>=8.6.1",
]

[tool.uv]
default-groups = "all"

[tool.pytest.ini_options]
markers = [
  "unit: unit tests",
  "performance: performance tests",
  "security: security tests",
  "contract: contract tests",
  "integration: integration tests",
  "e2e: end to end tests",
  "benchmark: performance benchmarks",
  "slow: slow tests",
]
testpaths = ["tests"]
pythonpath = ["src"]
timeout = 300
timeout_method = "thread"
addopts = "--tb=short --strict-markers --strict-config"
log_cli_level = "CRITICAL"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.pytest_benchmark]
min_rounds = 3
max_time = 0.005
timer = "perf_counter"
group_by = "name"
sort = "mean"
disable_gc = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 90.0
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
]

[tool.coverage.paths]
source = ["src/", "*/site-packages/"]

# ----------------------------
# Ruff (linter + formatter)
# ----------------------------
[tool.ruff]
target-version = "py313"
line-length = 88
src = ["src"]  # helps Ruff treat src/ as first-party

[tool.ruff.lint]
# Pragmatic set: style (E/W), import order (I), modernizations (UP),
# bugbear (B), comprehensions (C4), simplifications (SIM), extra Ruff rules (RUF).
select = ["E", "W", "I", "UP", "B", "C4", "SIM", "RUF"]
ignore = ["E501"]

[tool.ruff.lint.isort]
# Let `src = ["src"]` drive first-party detection; no need to list dev tools as third-party.
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.per-file-ignores]
# If you re-export in package __init__.py files.
"__init__.py" = ["F401", "F403", "RUF022"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
